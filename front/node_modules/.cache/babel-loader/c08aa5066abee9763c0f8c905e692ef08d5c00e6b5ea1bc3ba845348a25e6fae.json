{"ast":null,"code":"var _jsxFileName = \"/home/woot/coding/hyperiums2/front/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  ////// Appel de la fonction pour lire le fichier local\n  const fileName = './planetsMinimal.txt';\n  const [file, setFileContent] = useState('');\n  useEffect(() => {\n    fetch(fileName).then(response => response.text()).then(data => setFileContent(data)).catch(error => console.log(error));\n  }, []);\n\n  ////// Appel de la fonction pour formatter le fichier au format CSV\n  //// Formatte en CSV\n  // Divise chaque ligne en tableau de valeurs\n  const dataToFormat = file.split('\\n');\n  dataToFormat.splice(0, 1);\n  dataToFormat.splice(0, 1, 'id,name,govsystem,x,y,race,prod,activity,tag,civlevel,planetsize,SC');\n  const csvFile = dataToFormat.join('\\n').replace(/ /g, ',');\n  //// Retire les deux dernières valeurs de chaque ligne (planetsize et SC)\n  // Divise chaque ligne en tableau de valeurs\n  const lines = csvFile.split('\\n');\n  // Pour chaque ligne, retire les deux dernières valeurs (planetsize et SC)\n  const newLines = lines.map(line => {\n    const values = line.split(',');\n    const newValues = values.slice(0, -2);\n    return newValues.join(',');\n  });\n  // Joint les lignes en une seule chaîne de caractères\n  const newFileContent = newLines.join('\\n');\n\n  ////// Formattage des données\n  const planets = [];\n  const [formattedData, setFormattedData] = useState(null);\n  Papa.parse(newFileContent, {\n    header: true,\n    step: row => {\n      const planet = {\n        id: parseInt(row.data.id),\n        name: row.data.name,\n        x: parseInt(row.data.x),\n        y: parseInt(row.data.y),\n        govsystem: parseInt(row.data.govsystem),\n        race: parseInt(row.data.race),\n        prod: parseInt(row.data.prod),\n        activity: parseInt(row.data.activity),\n        tag: row.data.tag,\n        civlevel: parseInt(row.data.civlevel)\n      };\n      planets.push(planet);\n    },\n    complete: result => {\n      // Trier les planètes par coordonnées x et y\n      planets.sort((a, b) => {\n        if (a.x === b.x) {\n          return a.y - b.y;\n        }\n        return a.x - b.x;\n      });\n\n      // Transformation du tableau de planètes en une grille de planètes triées\n      const grid = {};\n      planets.forEach(planet => {\n        if (!grid[planet.x]) {\n          grid[planet.x] = {};\n        }\n        if (!grid[planet.x][planet.y]) {\n          grid[planet.x][planet.y] = [];\n        }\n        grid[planet.x][planet.y].push(planet);\n      });\n      setFormattedData(result.data);\n    }\n  });\n  console.log(formattedData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oSYAekV6U1QtUGLPNIvQN8jHJXQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Papa","jsxDEV","_jsxDEV","App","_s","fileName","file","setFileContent","fetch","then","response","text","data","catch","error","console","log","dataToFormat","split","splice","csvFile","join","replace","lines","newLines","map","line","values","newValues","slice","newFileContent","planets","formattedData","setFormattedData","parse","header","step","row","planet","id","parseInt","name","x","y","govsystem","race","prod","activity","tag","civlevel","push","complete","result","sort","a","b","grid","forEach","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\n\nfunction App() {\n  ////// Appel de la fonction pour lire le fichier local\n  const fileName = './planetsMinimal.txt';\n  const [file, setFileContent] = useState('');\n  useEffect(() => {\n    fetch(fileName)\n      .then(response => response.text())\n      .then(data => setFileContent(data))\n      .catch(error => console.log(error));\n  }, []);\n\n  ////// Appel de la fonction pour formatter le fichier au format CSV\n  //// Formatte en CSV\n  // Divise chaque ligne en tableau de valeurs\n  const dataToFormat = file.split('\\n');\n  dataToFormat.splice(0, 1);\n  dataToFormat.splice(0, 1, 'id,name,govsystem,x,y,race,prod,activity,tag,civlevel,planetsize,SC');\n  const csvFile = dataToFormat.join('\\n').replace(/ /g, ',');\n  //// Retire les deux dernières valeurs de chaque ligne (planetsize et SC)\n  // Divise chaque ligne en tableau de valeurs\n  const lines = csvFile.split('\\n');\n  // Pour chaque ligne, retire les deux dernières valeurs (planetsize et SC)\n  const newLines = lines.map((line) => {\n    const values = line.split(',');\n    const newValues = values.slice(0, -2);\n    return newValues.join(',');\n  });\n  // Joint les lignes en une seule chaîne de caractères\n  const newFileContent = newLines.join('\\n');\n\n  ////// Formattage des données\n  const planets = [];\n  const [formattedData, setFormattedData] = useState(null);\n\n  Papa.parse(newFileContent, {\n    header: true,\n    step: (row) => {\n      const planet = {\n        id: parseInt(row.data.id),\n        name: row.data.name,\n        x: parseInt(row.data.x),\n        y: parseInt(row.data.y),\n        govsystem: parseInt(row.data.govsystem),\n        race: parseInt(row.data.race),\n        prod: parseInt(row.data.prod),\n        activity: parseInt(row.data.activity),\n        tag: row.data.tag,\n        civlevel: parseInt(row.data.civlevel)\n      };\n      planets.push(planet);\n    },\n    complete: (result) => {\n      // Trier les planètes par coordonnées x et y\n      planets.sort((a, b) => {\n        if (a.x === b.x) {\n          return a.y - b.y;\n        }\n        return a.x - b.x;\n      });\n\n      // Transformation du tableau de planètes en une grille de planètes triées\n      const grid = {};\n      planets.forEach((planet) => {\n        if (!grid[planet.x]) {\n          grid[planet.x] = {};\n        }\n        if (!grid[planet.x][planet.y]) {\n          grid[planet.x][planet.y] = [];\n        }\n        grid[planet.x][planet.y].push(planet);\n      });\n      setFormattedData(result.data)\n    }\n  });\n\n  console.log(formattedData);\n\n  return(\n    <div>\n      <p>Bla</p>\n    </div>\n  )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/woot/coding/hyperiums2/front/src/components/renderGrid.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RenderGrid(_ref) {\n  let {\n    formattedData\n  } = _ref;\n  if (!formattedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n  const minX = Math.min(...Object.keys(formattedData));\n  const minY = Math.min(...Object.keys(formattedData[minX]));\n  const maxX = Math.max(...Object.keys(formattedData));\n  const maxY = Math.max(...Object.keys(formattedData[maxX]));\n  const cellSize = 40;\n  const gridStyle = {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${maxX - minX + 1}, ${cellSize}px)`,\n    gridTemplateRows: `repeat(${maxY - minY + 1}, ${cellSize}px)`,\n    gridGap: '1px',\n    border: '1px solid black',\n    margin: '10px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: gridStyle,\n    children: Object.keys(formattedData).map(x => Object.keys(formattedData[x]).map(y => formattedData[x][y].map(planet => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridColumn: x - minX + 1,\n        gridRow: maxY - y + 1,\n        backgroundColor: planet.civlevel === 1 ? 'white' : 'gray',\n        border: '1px solid black'\n      },\n      children: planet.name\n    }, planet.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this))))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = RenderGrid;\nexport default RenderGrid;\n\n// export function RenderGrid(planets) {\n//   const grid = [];\n//   const maxCoord = -31; // maximum des coordonnées x et y\n\n//   // Générer chaque ligne de la grille\n//   for (let y = maxCoord; y >= -maxCoord; y--) {\n//     const row = [];\n\n//     // Générer chaque cellule de la ligne\n//     for (let x = -maxCoord; x <= maxCoord; x++) {\n//     // Vérifier si la cellule contient des planètes\n//     if (planets[x] && planets[x][y]) {\n//       const cell = (\n//         <td key={`${x},${y}`}>\n//           <tr>({x}, {y})</tr>\n//           {planets[x][y].map(planet => (\n//             <div key={planet.name}>\n//               <p>{planet.name} {planet.tag}</p>\n//               {/* Ajoutez ici les autres informations de la planète */}\n//             </div>\n//           ))}\n//         </td>\n//       );\n//       row.push(cell);\n//     } else {\n//       row.push(<td key={`${x},${y}`}></td>);\n//     }}\n\n//     // Ajouter la ligne à la grille\n//     grid.push(<tr key={y}>{row}</tr>);\n//   }\n// \tconsole.log(grid)\n// \treturn grid;\n// }\nvar _c;\n$RefreshReg$(_c, \"RenderGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RenderGrid","_ref","formattedData","children","fileName","_jsxFileName","lineNumber","columnNumber","minX","Math","min","Object","keys","minY","maxX","max","maxY","cellSize","gridStyle","display","gridTemplateColumns","gridTemplateRows","gridGap","border","margin","style","map","x","y","planet","gridColumn","gridRow","backgroundColor","civlevel","name","id","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/renderGrid.js"],"sourcesContent":["import React from 'react';\n\nfunction RenderGrid({ formattedData }) {\n\n  if (!formattedData) {\n    return <div>Loading...</div>;\n  }\n\n  const minX = Math.min(...Object.keys(formattedData));\n  const minY = Math.min(...Object.keys(formattedData[minX]));\n  const maxX = Math.max(...Object.keys(formattedData));\n  const maxY = Math.max(...Object.keys(formattedData[maxX]));\n\n  const cellSize = 40;\n  const gridStyle = {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${maxX - minX + 1}, ${cellSize}px)`,\n    gridTemplateRows: `repeat(${maxY - minY + 1}, ${cellSize}px)`,\n    gridGap: '1px',\n    border: '1px solid black',\n    margin: '10px',\n  };\n\n  return (\n    <div style={gridStyle}>\n      {Object.keys(formattedData).map((x) =>\n        Object.keys(formattedData[x]).map((y) =>\n        formattedData[x][y].map((planet) => (\n            <div\n              key={planet.id}\n              style={{\n                gridColumn: x - minX + 1,\n                gridRow: maxY - y + 1,\n                backgroundColor: planet.civlevel === 1 ? 'white' : 'gray',\n                border: '1px solid black',\n              }}\n            >\n              {planet.name}\n            </div>\n          ))\n        )\n      )}\n    </div>\n  );\n}\n\nexport default RenderGrid;\n\n\n\n\n\n\n// export function RenderGrid(planets) {\n//   const grid = [];\n//   const maxCoord = -31; // maximum des coordonnées x et y\n\n//   // Générer chaque ligne de la grille\n//   for (let y = maxCoord; y >= -maxCoord; y--) {\n//     const row = [];\n\n//     // Générer chaque cellule de la ligne\n//     for (let x = -maxCoord; x <= maxCoord; x++) {\n//     // Vérifier si la cellule contient des planètes\n//     if (planets[x] && planets[x][y]) {\n//       const cell = (\n//         <td key={`${x},${y}`}>\n//           <tr>({x}, {y})</tr>\n//           {planets[x][y].map(planet => (\n//             <div key={planet.name}>\n//               <p>{planet.name} {planet.tag}</p>\n//               {/* Ajoutez ici les autres informations de la planète */}\n//             </div>\n//           ))}\n//         </td>\n//       );\n//       row.push(cell);\n//     } else {\n//       row.push(<td key={`${x},${y}`}></td>);\n//     }}\n\n//     // Ajouter la ligne à la grille\n//     grid.push(<tr key={y}>{row}</tr>);\n//   }\n// \tconsole.log(grid)\n// \treturn grid;\n// }"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAAEC;EAAc,CAAC,GAAAD,IAAA;EAEnC,IAAI,CAACC,aAAa,EAAE;IAClB,oBAAOH,OAAA;MAAAI,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM;EAC9B;EAEA,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACV,aAAa,CAAC,CAAC;EACpD,MAAMW,IAAI,GAAGJ,IAAI,CAACC,GAAG,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACV,aAAa,CAACM,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAMM,IAAI,GAAGL,IAAI,CAACM,GAAG,CAAC,GAAGJ,MAAM,CAACC,IAAI,CAACV,aAAa,CAAC,CAAC;EACpD,MAAMc,IAAI,GAAGP,IAAI,CAACM,GAAG,CAAC,GAAGJ,MAAM,CAACC,IAAI,CAACV,aAAa,CAACY,IAAI,CAAC,CAAC,CAAC;EAE1D,MAAMG,QAAQ,GAAG,EAAE;EACnB,MAAMC,SAAS,GAAG;IAChBC,OAAO,EAAE,MAAM;IACfC,mBAAmB,EAAG,UAASN,IAAI,GAAGN,IAAI,GAAG,CAAE,KAAIS,QAAS,KAAI;IAChEI,gBAAgB,EAAG,UAASL,IAAI,GAAGH,IAAI,GAAG,CAAE,KAAII,QAAS,KAAI;IAC7DK,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE,iBAAiB;IACzBC,MAAM,EAAE;EACV,CAAC;EAED,oBACEzB,OAAA;IAAK0B,KAAK,EAAEP,SAAU;IAAAf,QAAA,EACnBQ,MAAM,CAACC,IAAI,CAACV,aAAa,CAAC,CAACwB,GAAG,CAAEC,CAAC,IAChChB,MAAM,CAACC,IAAI,CAACV,aAAa,CAACyB,CAAC,CAAC,CAAC,CAACD,GAAG,CAAEE,CAAC,IACpC1B,aAAa,CAACyB,CAAC,CAAC,CAACC,CAAC,CAAC,CAACF,GAAG,CAAEG,MAAM,iBAC3B9B,OAAA;MAEE0B,KAAK,EAAE;QACLK,UAAU,EAAEH,CAAC,GAAGnB,IAAI,GAAG,CAAC;QACxBuB,OAAO,EAAEf,IAAI,GAAGY,CAAC,GAAG,CAAC;QACrBI,eAAe,EAAEH,MAAM,CAACI,QAAQ,KAAK,CAAC,GAAG,OAAO,GAAG,MAAM;QACzDV,MAAM,EAAE;MACV,CAAE;MAAApB,QAAA,EAED0B,MAAM,CAACK;IAAI,GARPL,MAAM,CAACM,EAAE;MAAA/B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAUjB,CAAC,CACH;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAAC6B,EAAA,GA1CQpC,UAAU;AA4CnB,eAAeA,UAAU;;AAOzB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
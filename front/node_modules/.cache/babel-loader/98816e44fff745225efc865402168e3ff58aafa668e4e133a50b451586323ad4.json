{"ast":null,"code":"import { normalize_columns_array } from './normalize_columns_array.js';\nimport { CsvError } from './CsvError.js';\nimport { underscore } from '../utils/underscore.js';\nconst normalize_options = function (opts) {\n  const options = {};\n  // Merge with user options\n  for (const opt in opts) {\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `encoding`\n  // Note: defined first because other options depends on it\n  // to convert chars/strings into buffers.\n  if (options.encoding === undefined || options.encoding === true) {\n    options.encoding = 'utf8';\n  } else if (options.encoding === null || options.encoding === false) {\n    options.encoding = null;\n  } else if (typeof options.encoding !== 'string' && options.encoding !== null) {\n    throw new CsvError('CSV_INVALID_OPTION_ENCODING', ['Invalid option encoding:', 'encoding must be a string or null to return a buffer,', `got ${JSON.stringify(options.encoding)}`], options);\n  }\n  // Normalize option `bom`\n  if (options.bom === undefined || options.bom === null || options.bom === false) {\n    options.bom = false;\n  } else if (options.bom !== true) {\n    throw new CsvError('CSV_INVALID_OPTION_BOM', ['Invalid option bom:', 'bom must be true,', `got ${JSON.stringify(options.bom)}`], options);\n  }\n  // Normalize option `cast`\n  options.cast_function = null;\n  if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === '') {\n    options.cast = undefined;\n  } else if (typeof options.cast === 'function') {\n    options.cast_function = options.cast;\n    options.cast = true;\n  } else if (options.cast !== true) {\n    throw new CsvError('CSV_INVALID_OPTION_CAST', ['Invalid option cast:', 'cast must be true or a function,', `got ${JSON.stringify(options.cast)}`], options);\n  }\n  // Normalize option `cast_date`\n  if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === '') {\n    options.cast_date = false;\n  } else if (options.cast_date === true) {\n    options.cast_date = function (value) {\n      const date = Date.parse(value);\n      return !isNaN(date) ? new Date(date) : value;\n    };\n  } else if (typeof options.cast_date !== 'function') {\n    throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', ['Invalid option cast_date:', 'cast_date must be true or a function,', `got ${JSON.stringify(options.cast_date)}`], options);\n  }\n  // Normalize option `columns`\n  options.cast_first_line_to_header = null;\n  if (options.columns === true) {\n    // Fields in the first line are converted as-is to columns\n    options.cast_first_line_to_header = undefined;\n  } else if (typeof options.columns === 'function') {\n    options.cast_first_line_to_header = options.columns;\n    options.columns = true;\n  } else if (Array.isArray(options.columns)) {\n    options.columns = normalize_columns_array(options.columns);\n  } else if (options.columns === undefined || options.columns === null || options.columns === false) {\n    options.columns = false;\n  } else {\n    throw new CsvError('CSV_INVALID_OPTION_COLUMNS', ['Invalid option columns:', 'expect an array, a function or true,', `got ${JSON.stringify(options.columns)}`], options);\n  }\n  // Normalize option `group_columns_by_name`\n  if (options.group_columns_by_name === undefined || options.group_columns_by_name === null || options.group_columns_by_name === false) {\n    options.group_columns_by_name = false;\n  } else if (options.group_columns_by_name !== true) {\n    throw new CsvError('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', ['Invalid option group_columns_by_name:', 'expect an boolean,', `got ${JSON.stringify(options.group_columns_by_name)}`], options);\n  } else if (options.columns === false) {\n    throw new CsvError('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', ['Invalid option group_columns_by_name:', 'the `columns` mode must be activated.'], options);\n  }\n  // Normalize option `comment`\n  if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === '') {\n    options.comment = null;\n  } else {\n    if (typeof options.comment === 'string') {\n      options.comment = Buffer.from(options.comment, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.comment)) {\n      throw new CsvError('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment:', 'comment must be a buffer or a string,', `got ${JSON.stringify(options.comment)}`], options);\n    }\n  }\n  // Normalize option `delimiter`\n  const delimiter_json = JSON.stringify(options.delimiter);\n  if (!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];\n  if (options.delimiter.length === 0) {\n    throw new CsvError('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', `got ${delimiter_json}`], options);\n  }\n  options.delimiter = options.delimiter.map(function (delimiter) {\n    if (delimiter === undefined || delimiter === null || delimiter === false) {\n      return Buffer.from(',', options.encoding);\n    }\n    if (typeof delimiter === 'string') {\n      delimiter = Buffer.from(delimiter, options.encoding);\n    }\n    if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', `got ${delimiter_json}`], options);\n    }\n    return delimiter;\n  });\n  // Normalize option `escape`\n  if (options.escape === undefined || options.escape === true) {\n    options.escape = Buffer.from('\"', options.encoding);\n  } else if (typeof options.escape === 'string') {\n    options.escape = Buffer.from(options.escape, options.encoding);\n  } else if (options.escape === null || options.escape === false) {\n    options.escape = null;\n  }\n  if (options.escape !== null) {\n    if (!Buffer.isBuffer(options.escape)) {\n      throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`);\n    }\n  }\n  // Normalize option `from`\n  if (options.from === undefined || options.from === null) {\n    options.from = 1;\n  } else {\n    if (typeof options.from === 'string' && /\\d+/.test(options.from)) {\n      options.from = parseInt(options.from);\n    }\n    if (Number.isInteger(options.from)) {\n      if (options.from < 0) {\n        throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`);\n    }\n  }\n  // Normalize option `from_line`\n  if (options.from_line === undefined || options.from_line === null) {\n    options.from_line = 1;\n  } else {\n    if (typeof options.from_line === 'string' && /\\d+/.test(options.from_line)) {\n      options.from_line = parseInt(options.from_line);\n    }\n    if (Number.isInteger(options.from_line)) {\n      if (options.from_line <= 0) {\n        throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`);\n    }\n  }\n  // Normalize options `ignore_last_delimiters`\n  if (options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null) {\n    options.ignore_last_delimiters = false;\n  } else if (typeof options.ignore_last_delimiters === 'number') {\n    options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n    if (options.ignore_last_delimiters === 0) {\n      options.ignore_last_delimiters = false;\n    }\n  } else if (typeof options.ignore_last_delimiters !== 'boolean') {\n    throw new CsvError('CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS', ['Invalid option `ignore_last_delimiters`:', 'the value must be a boolean value or an integer,', `got ${JSON.stringify(options.ignore_last_delimiters)}`], options);\n  }\n  if (options.ignore_last_delimiters === true && options.columns === false) {\n    throw new CsvError('CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS', ['The option `ignore_last_delimiters`', 'requires the activation of the `columns` option'], options);\n  }\n  // Normalize option `info`\n  if (options.info === undefined || options.info === null || options.info === false) {\n    options.info = false;\n  } else if (options.info !== true) {\n    throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`);\n  }\n  // Normalize option `max_record_size`\n  if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {\n    options.max_record_size = 0;\n  } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) {\n    // Great, nothing to do\n  } else if (typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)) {\n    options.max_record_size = parseInt(options.max_record_size);\n  } else {\n    throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`);\n  }\n  // Normalize option `objname`\n  if (options.objname === undefined || options.objname === null || options.objname === false) {\n    options.objname = undefined;\n  } else if (Buffer.isBuffer(options.objname)) {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty buffer`);\n    }\n    if (options.encoding === null) {\n      // Don't call `toString`, leave objname as a buffer\n    } else {\n      options.objname = options.objname.toString(options.encoding);\n    }\n  } else if (typeof options.objname === 'string') {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty string`);\n    }\n    // Great, nothing to do\n  } else if (typeof options.objname === 'number') {\n    // if(options.objname.length === 0){\n    //   throw new Error(`Invalid Option: objname must be a non empty string`);\n    // }\n    // Great, nothing to do\n  } else {\n    throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`);\n  }\n  if (options.objname !== undefined) {\n    if (typeof options.objname === 'number') {\n      if (options.columns !== false) {\n        throw Error('Invalid Option: objname index cannot be combined with columns or be defined as a field');\n      }\n    } else {\n      // A string or a buffer\n      if (options.columns === false) {\n        throw Error('Invalid Option: objname field must be combined with columns or be defined as an index');\n      }\n    }\n  }\n  // Normalize option `on_record`\n  if (options.on_record === undefined || options.on_record === null) {\n    options.on_record = undefined;\n  } else if (typeof options.on_record !== 'function') {\n    throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', ['Invalid option `on_record`:', 'expect a function,', `got ${JSON.stringify(options.on_record)}`], options);\n  }\n  // Normalize option `quote`\n  if (options.quote === null || options.quote === false || options.quote === '') {\n    options.quote = null;\n  } else {\n    if (options.quote === undefined || options.quote === true) {\n      options.quote = Buffer.from('\"', options.encoding);\n    } else if (typeof options.quote === 'string') {\n      options.quote = Buffer.from(options.quote, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.quote)) {\n      throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`);\n    }\n  }\n  // Normalize option `raw`\n  if (options.raw === undefined || options.raw === null || options.raw === false) {\n    options.raw = false;\n  } else if (options.raw !== true) {\n    throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`);\n  }\n  // Normalize option `record_delimiter`\n  if (options.record_delimiter === undefined) {\n    options.record_delimiter = [];\n  } else if (typeof options.record_delimiter === 'string' || Buffer.isBuffer(options.record_delimiter)) {\n    if (options.record_delimiter.length === 0) {\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a non empty string or buffer,', `got ${JSON.stringify(options.record_delimiter)}`], options);\n    }\n    options.record_delimiter = [options.record_delimiter];\n  } else if (!Array.isArray(options.record_delimiter)) {\n    throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a string, a buffer or array of string|buffer,', `got ${JSON.stringify(options.record_delimiter)}`], options);\n  }\n  options.record_delimiter = options.record_delimiter.map(function (rd, i) {\n    if (typeof rd !== 'string' && !Buffer.isBuffer(rd)) {\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a string, a buffer or array of string|buffer', `at index ${i},`, `got ${JSON.stringify(rd)}`], options);\n    } else if (rd.length === 0) {\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a non empty string or buffer', `at index ${i},`, `got ${JSON.stringify(rd)}`], options);\n    }\n    if (typeof rd === 'string') {\n      rd = Buffer.from(rd, options.encoding);\n    }\n    return rd;\n  });\n  // Normalize option `relax_column_count`\n  if (typeof options.relax_column_count === 'boolean') {\n    // Great, nothing to do\n  } else if (options.relax_column_count === undefined || options.relax_column_count === null) {\n    options.relax_column_count = false;\n  } else {\n    throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`);\n  }\n  if (typeof options.relax_column_count_less === 'boolean') {\n    // Great, nothing to do\n  } else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {\n    options.relax_column_count_less = false;\n  } else {\n    throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`);\n  }\n  if (typeof options.relax_column_count_more === 'boolean') {\n    // Great, nothing to do\n  } else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {\n    options.relax_column_count_more = false;\n  } else {\n    throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`);\n  }\n  // Normalize option `relax_quotes`\n  if (typeof options.relax_quotes === 'boolean') {\n    // Great, nothing to do\n  } else if (options.relax_quotes === undefined || options.relax_quotes === null) {\n    options.relax_quotes = false;\n  } else {\n    throw new Error(`Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`);\n  }\n  // Normalize option `skip_empty_lines`\n  if (typeof options.skip_empty_lines === 'boolean') {\n    // Great, nothing to do\n  } else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {\n    options.skip_empty_lines = false;\n  } else {\n    throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`);\n  }\n  // Normalize option `skip_records_with_empty_values`\n  if (typeof options.skip_records_with_empty_values === 'boolean') {\n    // Great, nothing to do\n  } else if (options.skip_records_with_empty_values === undefined || options.skip_records_with_empty_values === null) {\n    options.skip_records_with_empty_values = false;\n  } else {\n    throw new Error(`Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`);\n  }\n  // Normalize option `skip_records_with_error`\n  if (typeof options.skip_records_with_error === 'boolean') {\n    // Great, nothing to do\n  } else if (options.skip_records_with_error === undefined || options.skip_records_with_error === null) {\n    options.skip_records_with_error = false;\n  } else {\n    throw new Error(`Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`);\n  }\n  // Normalize option `rtrim`\n  if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {\n    options.rtrim = false;\n  } else if (options.rtrim !== true) {\n    throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`);\n  }\n  // Normalize option `ltrim`\n  if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {\n    options.ltrim = false;\n  } else if (options.ltrim !== true) {\n    throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`);\n  }\n  // Normalize option `trim`\n  if (options.trim === undefined || options.trim === null || options.trim === false) {\n    options.trim = false;\n  } else if (options.trim !== true) {\n    throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`);\n  }\n  // Normalize options `trim`, `ltrim` and `rtrim`\n  if (options.trim === true && opts.ltrim !== false) {\n    options.ltrim = true;\n  } else if (options.ltrim !== true) {\n    options.ltrim = false;\n  }\n  if (options.trim === true && opts.rtrim !== false) {\n    options.rtrim = true;\n  } else if (options.rtrim !== true) {\n    options.rtrim = false;\n  }\n  // Normalize option `to`\n  if (options.to === undefined || options.to === null) {\n    options.to = -1;\n  } else {\n    if (typeof options.to === 'string' && /\\d+/.test(options.to)) {\n      options.to = parseInt(options.to);\n    }\n    if (Number.isInteger(options.to)) {\n      if (options.to <= 0) {\n        throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`);\n    }\n  }\n  // Normalize option `to_line`\n  if (options.to_line === undefined || options.to_line === null) {\n    options.to_line = -1;\n  } else {\n    if (typeof options.to_line === 'string' && /\\d+/.test(options.to_line)) {\n      options.to_line = parseInt(options.to_line);\n    }\n    if (Number.isInteger(options.to_line)) {\n      if (options.to_line <= 0) {\n        throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`);\n      }\n    } else {\n      throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`);\n    }\n  }\n  return options;\n};\nexport { normalize_options };","map":{"version":3,"names":["normalize_columns_array","CsvError","underscore","normalize_options","opts","options","opt","encoding","undefined","JSON","stringify","bom","cast_function","cast","cast_date","value","date","Date","parse","isNaN","cast_first_line_to_header","columns","Array","isArray","group_columns_by_name","comment","Buffer","from","isBuffer","delimiter_json","delimiter","length","map","escape","Error","test","parseInt","Number","isInteger","from_line","ignore_last_delimiters","Math","floor","info","max_record_size","objname","toString","on_record","quote","raw","record_delimiter","rd","i","relax_column_count","relax_column_count_less","relax_column_count_more","relax_quotes","skip_empty_lines","skip_records_with_empty_values","skip_records_with_error","rtrim","ltrim","trim","to","to_line"],"sources":["/home/woot/coding/hyperiums2/front/node_modules/csv-parse/lib/api/normalize_options.js"],"sourcesContent":["\nimport {normalize_columns_array} from './normalize_columns_array.js';\nimport {CsvError} from './CsvError.js';\nimport {underscore} from '../utils/underscore.js';\n\nconst normalize_options = function(opts){\n  const options = {};\n  // Merge with user options\n  for(const opt in opts){\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `encoding`\n  // Note: defined first because other options depends on it\n  // to convert chars/strings into buffers.\n  if(options.encoding === undefined || options.encoding === true){\n    options.encoding = 'utf8';\n  }else if(options.encoding === null || options.encoding === false){\n    options.encoding = null;\n  }else if(typeof options.encoding !== 'string' && options.encoding !== null){\n    throw new CsvError('CSV_INVALID_OPTION_ENCODING', [\n      'Invalid option encoding:',\n      'encoding must be a string or null to return a buffer,',\n      `got ${JSON.stringify(options.encoding)}`\n    ], options);\n  }\n  // Normalize option `bom`\n  if(options.bom === undefined || options.bom === null || options.bom === false){\n    options.bom = false;\n  }else if(options.bom !== true){\n    throw new CsvError('CSV_INVALID_OPTION_BOM', [\n      'Invalid option bom:', 'bom must be true,',\n      `got ${JSON.stringify(options.bom)}`\n    ], options);\n  }\n  // Normalize option `cast`\n  options.cast_function = null;\n  if(options.cast === undefined || options.cast === null || options.cast === false || options.cast === ''){\n    options.cast = undefined;\n  }else if(typeof options.cast === 'function'){\n    options.cast_function = options.cast;\n    options.cast = true;\n  }else if(options.cast !== true){\n    throw new CsvError('CSV_INVALID_OPTION_CAST', [\n      'Invalid option cast:', 'cast must be true or a function,',\n      `got ${JSON.stringify(options.cast)}`\n    ], options);\n  }\n  // Normalize option `cast_date`\n  if(options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === ''){\n    options.cast_date = false;\n  }else if(options.cast_date === true){\n    options.cast_date = function(value){\n      const date = Date.parse(value);\n      return !isNaN(date) ? new Date(date) : value;\n    };\n  }else if (typeof options.cast_date !== 'function'){\n    throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', [\n      'Invalid option cast_date:', 'cast_date must be true or a function,',\n      `got ${JSON.stringify(options.cast_date)}`\n    ], options);\n  }\n  // Normalize option `columns`\n  options.cast_first_line_to_header = null;\n  if(options.columns === true){\n    // Fields in the first line are converted as-is to columns\n    options.cast_first_line_to_header = undefined;\n  }else if(typeof options.columns === 'function'){\n    options.cast_first_line_to_header = options.columns;\n    options.columns = true;\n  }else if(Array.isArray(options.columns)){\n    options.columns = normalize_columns_array(options.columns);\n  }else if(options.columns === undefined || options.columns === null || options.columns === false){\n    options.columns = false;\n  }else{\n    throw new CsvError('CSV_INVALID_OPTION_COLUMNS', [\n      'Invalid option columns:',\n      'expect an array, a function or true,',\n      `got ${JSON.stringify(options.columns)}`\n    ], options);\n  }\n  // Normalize option `group_columns_by_name`\n  if(options.group_columns_by_name === undefined || options.group_columns_by_name === null || options.group_columns_by_name === false){\n    options.group_columns_by_name = false;\n  }else if(options.group_columns_by_name !== true){\n    throw new CsvError('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', [\n      'Invalid option group_columns_by_name:',\n      'expect an boolean,',\n      `got ${JSON.stringify(options.group_columns_by_name)}`\n    ], options);\n  }else if(options.columns === false){\n    throw new CsvError('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', [\n      'Invalid option group_columns_by_name:',\n      'the `columns` mode must be activated.'\n    ], options);\n  }\n  // Normalize option `comment`\n  if(options.comment === undefined || options.comment === null || options.comment === false || options.comment === ''){\n    options.comment = null;\n  }else{\n    if(typeof options.comment === 'string'){\n      options.comment = Buffer.from(options.comment, options.encoding);\n    }\n    if(!Buffer.isBuffer(options.comment)){\n      throw new CsvError('CSV_INVALID_OPTION_COMMENT', [\n        'Invalid option comment:',\n        'comment must be a buffer or a string,',\n        `got ${JSON.stringify(options.comment)}`\n      ], options);\n    }\n  }\n  // Normalize option `delimiter`\n  const delimiter_json = JSON.stringify(options.delimiter);\n  if(!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];\n  if(options.delimiter.length === 0){\n    throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n      'Invalid option delimiter:',\n      'delimiter must be a non empty string or buffer or array of string|buffer,',\n      `got ${delimiter_json}`\n    ], options);\n  }\n  options.delimiter = options.delimiter.map(function(delimiter){\n    if(delimiter === undefined || delimiter === null || delimiter === false){\n      return Buffer.from(',', options.encoding);\n    }\n    if(typeof delimiter === 'string'){\n      delimiter = Buffer.from(delimiter, options.encoding);\n    }\n    if(!Buffer.isBuffer(delimiter) || delimiter.length === 0){\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n        'Invalid option delimiter:',\n        'delimiter must be a non empty string or buffer or array of string|buffer,',\n        `got ${delimiter_json}`\n      ], options);\n    }\n    return delimiter;\n  });\n  // Normalize option `escape`\n  if(options.escape === undefined || options.escape === true){\n    options.escape = Buffer.from('\"', options.encoding);\n  }else if(typeof options.escape === 'string'){\n    options.escape = Buffer.from(options.escape, options.encoding);\n  }else if (options.escape === null || options.escape === false){\n    options.escape = null;\n  }\n  if(options.escape !== null){\n    if(!Buffer.isBuffer(options.escape)){\n      throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`);\n    }\n  }\n  // Normalize option `from`\n  if(options.from === undefined || options.from === null){\n    options.from = 1;\n  }else{\n    if(typeof options.from === 'string' && /\\d+/.test(options.from)){\n      options.from = parseInt(options.from);\n    }\n    if(Number.isInteger(options.from)){\n      if(options.from < 0){\n        throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`);\n      }\n    }else{\n      throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`);\n    }\n  }\n  // Normalize option `from_line`\n  if(options.from_line === undefined || options.from_line === null){\n    options.from_line = 1;\n  }else{\n    if(typeof options.from_line === 'string' && /\\d+/.test(options.from_line)){\n      options.from_line = parseInt(options.from_line);\n    }\n    if(Number.isInteger(options.from_line)){\n      if(options.from_line <= 0){\n        throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`);\n      }\n    }else{\n      throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`);\n    }\n  }\n  // Normalize options `ignore_last_delimiters`\n  if(options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null){\n    options.ignore_last_delimiters = false;\n  }else if(typeof options.ignore_last_delimiters === 'number'){\n    options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n    if(options.ignore_last_delimiters === 0){\n      options.ignore_last_delimiters = false;\n    }\n  }else if(typeof options.ignore_last_delimiters !== 'boolean'){\n    throw new CsvError('CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS', [\n      'Invalid option `ignore_last_delimiters`:',\n      'the value must be a boolean value or an integer,',\n      `got ${JSON.stringify(options.ignore_last_delimiters)}`\n    ], options);\n  }\n  if(options.ignore_last_delimiters === true && options.columns === false){\n    throw new CsvError('CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS', [\n      'The option `ignore_last_delimiters`',\n      'requires the activation of the `columns` option'\n    ], options);\n  }\n  // Normalize option `info`\n  if(options.info === undefined || options.info === null || options.info === false){\n    options.info = false;\n  }else if(options.info !== true){\n    throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`);\n  }\n  // Normalize option `max_record_size`\n  if(options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false){\n    options.max_record_size = 0;\n  }else if(Number.isInteger(options.max_record_size) && options.max_record_size >= 0){\n    // Great, nothing to do\n  }else if(typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)){\n    options.max_record_size = parseInt(options.max_record_size);\n  }else{\n    throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`);\n  }\n  // Normalize option `objname`\n  if(options.objname === undefined || options.objname === null || options.objname === false){\n    options.objname = undefined;\n  }else if(Buffer.isBuffer(options.objname)){\n    if(options.objname.length === 0){\n      throw new Error(`Invalid Option: objname must be a non empty buffer`);\n    }\n    if(options.encoding === null){\n      // Don't call `toString`, leave objname as a buffer\n    }else{\n      options.objname = options.objname.toString(options.encoding);\n    }\n  }else if(typeof options.objname === 'string'){\n    if(options.objname.length === 0){\n      throw new Error(`Invalid Option: objname must be a non empty string`);\n    }\n    // Great, nothing to do\n  }else if(typeof options.objname === 'number'){\n    // if(options.objname.length === 0){\n    //   throw new Error(`Invalid Option: objname must be a non empty string`);\n    // }\n    // Great, nothing to do\n  }else{\n    throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`);\n  }\n  if(options.objname !== undefined){\n    if(typeof options.objname === 'number'){\n      if(options.columns !== false){\n        throw Error('Invalid Option: objname index cannot be combined with columns or be defined as a field');\n      }\n    }else{ // A string or a buffer\n      if(options.columns === false){\n        throw Error('Invalid Option: objname field must be combined with columns or be defined as an index');\n      }\n    }\n  }\n  // Normalize option `on_record`\n  if(options.on_record === undefined || options.on_record === null){\n    options.on_record = undefined;\n  }else if(typeof options.on_record !== 'function'){\n    throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', [\n      'Invalid option `on_record`:',\n      'expect a function,',\n      `got ${JSON.stringify(options.on_record)}`\n    ], options);\n  }\n  // Normalize option `quote`\n  if(options.quote === null || options.quote === false || options.quote === ''){\n    options.quote = null;\n  }else{\n    if(options.quote === undefined || options.quote === true){\n      options.quote = Buffer.from('\"', options.encoding);\n    }else if(typeof options.quote === 'string'){\n      options.quote = Buffer.from(options.quote, options.encoding);\n    }\n    if(!Buffer.isBuffer(options.quote)){\n      throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`);\n    }\n  }\n  // Normalize option `raw`\n  if(options.raw === undefined || options.raw === null || options.raw === false){\n    options.raw = false;\n  }else if(options.raw !== true){\n    throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`);\n  }\n  // Normalize option `record_delimiter`\n  if(options.record_delimiter === undefined){\n    options.record_delimiter = [];\n  }else if(typeof options.record_delimiter === 'string' || Buffer.isBuffer(options.record_delimiter)){\n    if(options.record_delimiter.length === 0){\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n        'Invalid option `record_delimiter`:',\n        'value must be a non empty string or buffer,',\n        `got ${JSON.stringify(options.record_delimiter)}`\n      ], options);\n    }\n    options.record_delimiter = [options.record_delimiter];\n  }else if(!Array.isArray(options.record_delimiter)){\n    throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n      'Invalid option `record_delimiter`:',\n      'value must be a string, a buffer or array of string|buffer,',\n      `got ${JSON.stringify(options.record_delimiter)}`\n    ], options);\n  }\n  options.record_delimiter = options.record_delimiter.map(function(rd, i){\n    if(typeof rd !== 'string' && ! Buffer.isBuffer(rd)){\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n        'Invalid option `record_delimiter`:',\n        'value must be a string, a buffer or array of string|buffer',\n        `at index ${i},`,\n        `got ${JSON.stringify(rd)}`\n      ], options);\n    }else if(rd.length === 0){\n      throw new CsvError('CSV_INVALID_OPTION_RECORD_DELIMITER', [\n        'Invalid option `record_delimiter`:',\n        'value must be a non empty string or buffer',\n        `at index ${i},`,\n        `got ${JSON.stringify(rd)}`\n      ], options);\n    }\n    if(typeof rd === 'string'){\n      rd = Buffer.from(rd, options.encoding);\n    }\n    return rd;\n  });\n  // Normalize option `relax_column_count`\n  if(typeof options.relax_column_count === 'boolean'){\n    // Great, nothing to do\n  }else if(options.relax_column_count === undefined || options.relax_column_count === null){\n    options.relax_column_count = false;\n  }else{\n    throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`);\n  }\n  if(typeof options.relax_column_count_less === 'boolean'){\n    // Great, nothing to do\n  }else if(options.relax_column_count_less === undefined || options.relax_column_count_less === null){\n    options.relax_column_count_less = false;\n  }else{\n    throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`);\n  }\n  if(typeof options.relax_column_count_more === 'boolean'){\n    // Great, nothing to do\n  }else if(options.relax_column_count_more === undefined || options.relax_column_count_more === null){\n    options.relax_column_count_more = false;\n  }else{\n    throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`);\n  }\n  // Normalize option `relax_quotes`\n  if(typeof options.relax_quotes === 'boolean'){\n    // Great, nothing to do\n  }else if(options.relax_quotes === undefined || options.relax_quotes === null){\n    options.relax_quotes = false;\n  }else{\n    throw new Error(`Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`);\n  }\n  // Normalize option `skip_empty_lines`\n  if(typeof options.skip_empty_lines === 'boolean'){\n    // Great, nothing to do\n  }else if(options.skip_empty_lines === undefined || options.skip_empty_lines === null){\n    options.skip_empty_lines = false;\n  }else{\n    throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`);\n  }\n  // Normalize option `skip_records_with_empty_values`\n  if(typeof options.skip_records_with_empty_values === 'boolean'){\n    // Great, nothing to do\n  }else if(options.skip_records_with_empty_values === undefined || options.skip_records_with_empty_values === null){\n    options.skip_records_with_empty_values = false;\n  }else{\n    throw new Error(`Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`);\n  }\n  // Normalize option `skip_records_with_error`\n  if(typeof options.skip_records_with_error === 'boolean'){\n    // Great, nothing to do\n  }else if(options.skip_records_with_error === undefined || options.skip_records_with_error === null){\n    options.skip_records_with_error = false;\n  }else{\n    throw new Error(`Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`);\n  }\n  // Normalize option `rtrim`\n  if(options.rtrim === undefined || options.rtrim === null || options.rtrim === false){\n    options.rtrim = false;\n  }else if(options.rtrim !== true){\n    throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`);\n  }\n  // Normalize option `ltrim`\n  if(options.ltrim === undefined || options.ltrim === null || options.ltrim === false){\n    options.ltrim = false;\n  }else if(options.ltrim !== true){\n    throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`);\n  }\n  // Normalize option `trim`\n  if(options.trim === undefined || options.trim === null || options.trim === false){\n    options.trim = false;\n  }else if(options.trim !== true){\n    throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`);\n  }\n  // Normalize options `trim`, `ltrim` and `rtrim`\n  if(options.trim === true && opts.ltrim !== false){\n    options.ltrim = true;\n  }else if(options.ltrim !== true){\n    options.ltrim = false;\n  }\n  if(options.trim === true && opts.rtrim !== false){\n    options.rtrim = true;\n  }else if(options.rtrim !== true){\n    options.rtrim = false;\n  }\n  // Normalize option `to`\n  if(options.to === undefined || options.to === null){\n    options.to = -1;\n  }else{\n    if(typeof options.to === 'string' && /\\d+/.test(options.to)){\n      options.to = parseInt(options.to);\n    }\n    if(Number.isInteger(options.to)){\n      if(options.to <= 0){\n        throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`);\n      }\n    }else{\n      throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`);\n    }\n  }\n  // Normalize option `to_line`\n  if(options.to_line === undefined || options.to_line === null){\n    options.to_line = -1;\n  }else{\n    if(typeof options.to_line === 'string' && /\\d+/.test(options.to_line)){\n      options.to_line = parseInt(options.to_line);\n    }\n    if(Number.isInteger(options.to_line)){\n      if(options.to_line <= 0){\n        throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`);\n      }\n    }else{\n      throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`);\n    }\n  }\n  return options;\n};\n\nexport {normalize_options};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
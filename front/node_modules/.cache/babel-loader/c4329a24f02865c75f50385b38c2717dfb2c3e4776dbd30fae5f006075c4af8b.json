{"ast":null,"code":"import ResizeableBuffer from '../utils/ResizeableBuffer.js';\n\n// white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\nconst np = 12;\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\nconst space = 32;\nconst tab = 9;\nconst init_state = function (options) {\n  return {\n    bomSkipped: false,\n    bufBytesStart: 0,\n    castField: options.cast_function,\n    commenting: false,\n    // Current error encountered by a record\n    error: undefined,\n    enabled: options.from_line === 1,\n    escaping: false,\n    escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n    // columns can be `false`, `true`, `Array`\n    expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,\n    field: new ResizeableBuffer(20),\n    firstLineToHeaders: options.cast_first_line_to_header,\n    needMoreDataSize: Math.max(\n    // Skip if the remaining buffer smaller than comment\n    options.comment !== null ? options.comment.length : 0,\n    // Skip if the remaining buffer can be delimiter\n    ...options.delimiter.map(delimiter => delimiter.length),\n    // Skip if the remaining buffer can be escape sequence\n    options.quote !== null ? options.quote.length : 0),\n    previousBuf: undefined,\n    quoting: false,\n    stop: false,\n    rawBuffer: new ResizeableBuffer(100),\n    record: [],\n    recordHasError: false,\n    record_length: 0,\n    recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 0 : Math.max(...options.record_delimiter.map(v => v.length)),\n    trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n    wasQuoting: false,\n    wasRowDelimiter: false,\n    timchars: [Buffer.from(Buffer.from([cr], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([nl], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([np], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([space], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([tab], 'utf8').toString(), options.encoding)]\n  };\n};\nexport { init_state };","map":{"version":3,"names":["ResizeableBuffer","np","cr","nl","space","tab","init_state","options","bomSkipped","bufBytesStart","castField","cast_function","commenting","error","undefined","enabled","from_line","escaping","escapeIsQuote","Buffer","isBuffer","escape","quote","compare","expectedRecordLength","Array","isArray","columns","length","field","firstLineToHeaders","cast_first_line_to_header","needMoreDataSize","Math","max","comment","delimiter","map","previousBuf","quoting","stop","rawBuffer","record","recordHasError","record_length","recordDelimiterMaxLength","record_delimiter","v","trimChars","from","encoding","wasQuoting","wasRowDelimiter","timchars","toString"],"sources":["/home/woot/coding/hyperiums2/front/node_modules/csv-parse/lib/api/init_state.js"],"sourcesContent":["\nimport ResizeableBuffer from '../utils/ResizeableBuffer.js';\n\n// white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\nconst np = 12;\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\nconst space = 32;\nconst tab = 9;\n\nconst init_state = function(options){\n  return {\n    bomSkipped: false,\n    bufBytesStart: 0,\n    castField: options.cast_function,\n    commenting: false,\n    // Current error encountered by a record\n    error: undefined,\n    enabled: options.from_line === 1,\n    escaping: false,\n    escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n    // columns can be `false`, `true`, `Array`\n    expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,\n    field: new ResizeableBuffer(20),\n    firstLineToHeaders: options.cast_first_line_to_header,\n    needMoreDataSize: Math.max(\n      // Skip if the remaining buffer smaller than comment\n      options.comment !== null ? options.comment.length : 0,\n      // Skip if the remaining buffer can be delimiter\n      ...options.delimiter.map((delimiter) => delimiter.length),\n      // Skip if the remaining buffer can be escape sequence\n      options.quote !== null ? options.quote.length : 0,\n    ),\n    previousBuf: undefined,\n    quoting: false,\n    stop: false,\n    rawBuffer: new ResizeableBuffer(100),\n    record: [],\n    recordHasError: false,\n    record_length: 0,\n    recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 0 : Math.max(...options.record_delimiter.map((v) => v.length)),\n    trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n    wasQuoting: false,\n    wasRowDelimiter: false,\n    timchars: [\n      Buffer.from(Buffer.from([cr], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([nl], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([np], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([space], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([tab], 'utf8').toString(), options.encoding),\n    ]\n  };\n};\n\nexport {init_state};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
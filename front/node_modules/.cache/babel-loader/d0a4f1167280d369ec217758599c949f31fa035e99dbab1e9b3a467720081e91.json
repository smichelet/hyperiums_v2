{"ast":null,"code":"import { parse } from 'csv-parse';\nexport function SortData(data) {\n  const records = parse(data, {\n    columns: true\n  }, (err, records) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    const sortedPlanets = records.sort((a, b) => {\n      if (a.x === b.x) {\n        return a.y - b.y;\n      }\n      return a.x - b.x;\n    });\n    console.log(sortedPlanets);\n  });\n  return records;\n}\n\n// export function SortData(data) {\n//   const lines = data.split('\\n');\n// \t// console.log(lines);\n\n//   const values = lines.map((line) => {\n// \t\treturn line.split(',');\n// \t});\n\n// \tvalues.sort((a, b) => {\n// \t\tif (a[3] === b[3]) {\n// \t\t\treturn a[4] - b[4];\n// \t\t} else {\n// \t\t\treturn a[3] - b[3];\n// \t\t}\n// \t});\n\n// \t// Regroupe les tableaux triés par coordonnée x en un tableau principal\n// \tconst groupedValues = [];\n// \tlet currentX = null;\n\n// \tfor (let i = 0; i < values.length; i++) {\n// \t\tconst value = values[i];\n// \t\tconst x = value[3];\n\n// \t\tif (x !== currentX) {\n// \t\t\tcurrentX = x;\n// \t\t\tgroupedValues.push([]);\n// \t\t}\n\n// \t\tgroupedValues[groupedValues.length - 1].push(value);\n// \t}\n\n// \treturn groupedValues\n// }\n_c = SortData;\nvar _c;\n$RefreshReg$(_c, \"SortData\");","map":{"version":3,"names":["parse","SortData","data","records","columns","err","console","error","sortedPlanets","sort","a","b","x","y","log","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/sortData.js"],"sourcesContent":["import { parse } from 'csv-parse';\n\nexport function SortData(data) {\n\tconst records = parse(data, { columns: true }, (err, records) => {\n\t\tif (err) {\n\t\t\tconsole.error(err);\n\t\t\treturn;\n\t\t}\n\t\tconst sortedPlanets = records.sort((a, b) => {\n\t\t\tif (a.x === b.x) {\n\t\t\t\treturn a.y - b.y;\n\t\t\t}\n\t\t\treturn a.x - b.x;\n\t\t});\n\t\tconsole.log(sortedPlanets);\n\t});\n\treturn records;\n}\n\n// export function SortData(data) {\n//   const lines = data.split('\\n');\n// \t// console.log(lines);\n\n//   const values = lines.map((line) => {\n// \t\treturn line.split(',');\n// \t});\n\n// \tvalues.sort((a, b) => {\n// \t\tif (a[3] === b[3]) {\n// \t\t\treturn a[4] - b[4];\n// \t\t} else {\n// \t\t\treturn a[3] - b[3];\n// \t\t}\n// \t});\n\n// \t// Regroupe les tableaux triés par coordonnée x en un tableau principal\n// \tconst groupedValues = [];\n// \tlet currentX = null;\n\n// \tfor (let i = 0; i < values.length; i++) {\n// \t\tconst value = values[i];\n// \t\tconst x = value[3];\n\n// \t\tif (x !== currentX) {\n// \t\t\tcurrentX = x;\n// \t\t\tgroupedValues.push([]);\n// \t\t}\n\n// \t\tgroupedValues[groupedValues.length - 1].push(value);\n// \t}\n\n// \treturn groupedValues\n// }"],"mappings":"AAAA,SAASA,KAAK,QAAQ,WAAW;AAEjC,OAAO,SAASC,QAAQA,CAACC,IAAI,EAAE;EAC9B,MAAMC,OAAO,GAAGH,KAAK,CAACE,IAAI,EAAE;IAAEE,OAAO,EAAE;EAAK,CAAC,EAAE,CAACC,GAAG,EAAEF,OAAO,KAAK;IAChE,IAAIE,GAAG,EAAE;MACRC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB;IACD;IACA,MAAMG,aAAa,GAAGL,OAAO,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC5C,IAAID,CAAC,CAACE,CAAC,KAAKD,CAAC,CAACC,CAAC,EAAE;QAChB,OAAOF,CAAC,CAACG,CAAC,GAAGF,CAAC,CAACE,CAAC;MACjB;MACA,OAAOH,CAAC,CAACE,CAAC,GAAGD,CAAC,CAACC,CAAC;IACjB,CAAC,CAAC;IACFN,OAAO,CAACQ,GAAG,CAACN,aAAa,CAAC;EAC3B,CAAC,CAAC;EACF,OAAOL,OAAO;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAAY,EAAA,GAlDgBd,QAAQ;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
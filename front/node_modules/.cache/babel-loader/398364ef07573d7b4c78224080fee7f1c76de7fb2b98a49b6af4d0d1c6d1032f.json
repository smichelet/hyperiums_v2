{"ast":null,"code":"var _jsxFileName = \"/home/woot/coding/hyperiums2/front/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { FormatData } from './components/formatData';\nimport { FormatToCSV } from './components/formatToCSV';\nimport { ReadFile } from './components/readFile';\nimport { RenderGrid } from './components/renderGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // Appel de la fonction pour lire le fichier local\n  const fileName = './planetsMinimal.txt';\n  const file = ReadFile(fileName);\n\n  // Appel de la fonction pour formatter le fichier au format CSV\n  const csvFile = FormatToCSV(file);\n\n  // Appel de la fonction qui trie et structure les données\n  // const [formattedData, setFormattedData] = useState(null);\n  // useEffect(() => {\n  //   FormatData(csvFile)\n  //     .then((structuredData) => {\n  //       setFormattedData(structuredData);\n  //     })\n  //     .catch((err) => {\n  //       console.error(err);\n  //     });\n  // }, [csvFile]);\n  // console.log(formattedData);\n  // console.log(typeof(formattedData));\n\n  // Appel de la fonction qui trie et structure les données\n  async function getData(csvFile) {\n    try {\n      const formattedData = await FormatData(csvFile);\n      console.log(formattedData);\n      // Utilisez la valeur de formattedData comme vous le souhaitez\n    } catch (error) {\n      // console.error('Erreur lors du traitement des données :', error);\n    }\n  }\n  getData(csvFile);\n  // console.log(testtest[\"-7\"][\"-30\"][0][\"name\"]);\n  // const formattedData = getData(csvFile);\n  // console.log(formattedData);\n\n  // console.log(formattedData[\"-7\"][\"-30\"][0][\"name\"]); // Affiche : \"Jean\"\n  // console.log(formattedData);\n  // console.log(formattedData[\"-7\"][\"-30\"][0][\"name\"])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FormatData","FormatToCSV","ReadFile","RenderGrid","jsxDEV","_jsxDEV","App","fileName","file","csvFile","getData","formattedData","console","log","error","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FormatData } from './components/formatData';\nimport { FormatToCSV } from './components/formatToCSV';\nimport { ReadFile } from './components/readFile';\nimport { RenderGrid } from './components/renderGrid';\n\nfunction App() {\n  // Appel de la fonction pour lire le fichier local\n  const fileName = './planetsMinimal.txt';\n  const file = ReadFile(fileName);\n\n  // Appel de la fonction pour formatter le fichier au format CSV\n  const csvFile = FormatToCSV(file);\n\n  // Appel de la fonction qui trie et structure les données\n  // const [formattedData, setFormattedData] = useState(null);\n  // useEffect(() => {\n  //   FormatData(csvFile)\n  //     .then((structuredData) => {\n  //       setFormattedData(structuredData);\n  //     })\n  //     .catch((err) => {\n  //       console.error(err);\n  //     });\n  // }, [csvFile]);\n  // console.log(formattedData);\n  // console.log(typeof(formattedData));\n\n  // Appel de la fonction qui trie et structure les données\n  async function getData(csvFile) {\n    try {\n      const formattedData = await FormatData(csvFile);\n      console.log(formattedData);\n      // Utilisez la valeur de formattedData comme vous le souhaitez\n    } catch (error) {\n      // console.error('Erreur lors du traitement des données :', error);\n    }\n  }\n\n  getData(csvFile);\n  // console.log(testtest[\"-7\"][\"-30\"][0][\"name\"]);\n  // const formattedData = getData(csvFile);\n  // console.log(formattedData);\n\n  // console.log(formattedData[\"-7\"][\"-30\"][0][\"name\"]); // Affiche : \"Jean\"\n  // console.log(formattedData);\n  // console.log(formattedData[\"-7\"][\"-30\"][0][\"name\"])\n\n  return(\n    <div>\n      <p>Bla</p>\n    </div>\n  )\n}\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,UAAU,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,GAAGA,CAAA,EAAG;EACb;EACA,MAAMC,QAAQ,GAAG,sBAAsB;EACvC,MAAMC,IAAI,GAAGN,QAAQ,CAACK,QAAQ,CAAC;;EAE/B;EACA,MAAME,OAAO,GAAGR,WAAW,CAACO,IAAI,CAAC;;EAEjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,eAAeE,OAAOA,CAACD,OAAO,EAAE;IAC9B,IAAI;MACF,MAAME,aAAa,GAAG,MAAMX,UAAU,CAACS,OAAO,CAAC;MAC/CG,OAAO,CAACC,GAAG,CAACF,aAAa,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd;IAAA;EAEJ;EAEAJ,OAAO,CAACD,OAAO,CAAC;EAChB;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACEJ,OAAA;IAAAU,QAAA,eACEV,OAAA;MAAAU,QAAA,EAAG;IAAG;MAAAR,QAAA,EAAAS,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAI;IAAAX,QAAA,EAAAS,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV;AAACC,EAAA,GA/CQb,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
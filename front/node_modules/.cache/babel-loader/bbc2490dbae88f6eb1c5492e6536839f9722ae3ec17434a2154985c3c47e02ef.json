{"ast":null,"code":"import Papa from 'papaparse';\nexport function FormatData(csvFile) {\n  return new Promise((resolve, reject) => {\n    const planets = [];\n    Papa.parse(csvFile, {\n      header: true,\n      step: row => {\n        const planet = {\n          id: parseInt(row.data.id),\n          name: row.data.name,\n          x: parseInt(row.data.x),\n          y: parseInt(row.data.y),\n          govsystem: parseInt(row.data.govsystem),\n          race: parseInt(row.data.race),\n          prod: parseInt(row.data.prod),\n          activity: parseInt(row.data.activity),\n          tag: row.data.tag,\n          civlevel: parseInt(row.data.civlevel)\n        };\n        planets.push(planet);\n      },\n      complete: () => {\n        // Trier les planètes par coordonnées x et y\n        planets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n\n        // Transformation du tableau de planètes en une grille de planètes triées\n        const grid = {};\n        planets.forEach(planet => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n        resolve(grid);\n      },\n      error: error => {\n        reject(error);\n      }\n    });\n  });\n}\n_c = FormatData;\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["Papa","FormatData","csvFile","Promise","resolve","reject","planets","parse","header","step","row","planet","id","parseInt","data","name","x","y","govsystem","race","prod","activity","tag","civlevel","push","complete","sort","a","b","grid","forEach","error","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["import Papa from 'papaparse';\n\nexport function FormatData(csvFile) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst planets = [];\n\n\t\tPapa.parse(csvFile, {\n\t\t\theader: true,\n\t\t\tstep: (row) => {\n\t\t\t\tconst planet = {\n\t\t\t\t\tid: parseInt(row.data.id),\n\t\t\t\t\tname: row.data.name,\n\t\t\t\t\tx: parseInt(row.data.x),\n\t\t\t\t\ty: parseInt(row.data.y),\n\t\t\t\t\tgovsystem: parseInt(row.data.govsystem),\n\t\t\t\t\trace: parseInt(row.data.race),\n\t\t\t\t\tprod: parseInt(row.data.prod),\n\t\t\t\t\tactivity: parseInt(row.data.activity),\n\t\t\t\t\ttag: row.data.tag,\n\t\t\t\t\tcivlevel: parseInt(row.data.civlevel)\n\t\t\t\t};\n\t\t\t\tplanets.push(planet);\n\t\t\t},\n\t\t\tcomplete: () => {\n\t\t\t\t// Trier les planètes par coordonnées x et y\n\t\t\t\tplanets.sort((a, b) => {\n\t\t\t\t\tif (a.x === b.x) {\n\t\t\t\t\t\treturn a.y - b.y;\n\t\t\t\t\t}\n\t\t\t\t\treturn a.x - b.x;\n\t\t\t\t});\n\n\t\t\t\t// Transformation du tableau de planètes en une grille de planètes triées\n\t\t\t\tconst grid = {};\n\t\t\t\tplanets.forEach((planet) => {\n\t\t\t\t\tif (!grid[planet.x]) {\n\t\t\t\t\t\tgrid[planet.x] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (!grid[planet.x][planet.y]) {\n\t\t\t\t\t\tgrid[planet.x][planet.y] = [];\n\t\t\t\t\t}\n\t\t\t\t\tgrid[planet.x][planet.y].push(planet);\n\t\t\t\t});\n\n\t\t\t\tresolve(grid);\n\t\t\t},\n\t\t\terror: (error) => {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t});\n}"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAE;EACnC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACvC,MAAMC,OAAO,GAAG,EAAE;IAElBN,IAAI,CAACO,KAAK,CAACL,OAAO,EAAE;MACnBM,MAAM,EAAE,IAAI;MACZC,IAAI,EAAGC,GAAG,IAAK;QACd,MAAMC,MAAM,GAAG;UACdC,EAAE,EAAEC,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACF,EAAE,CAAC;UACzBG,IAAI,EAAEL,GAAG,CAACI,IAAI,CAACC,IAAI;UACnBC,CAAC,EAAEH,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACE,CAAC,CAAC;UACvBC,CAAC,EAAEJ,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACG,CAAC,CAAC;UACvBC,SAAS,EAAEL,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACI,SAAS,CAAC;UACvCC,IAAI,EAAEN,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACK,IAAI,CAAC;UAC7BC,IAAI,EAAEP,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACM,IAAI,CAAC;UAC7BC,QAAQ,EAAER,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACO,QAAQ,CAAC;UACrCC,GAAG,EAAEZ,GAAG,CAACI,IAAI,CAACQ,GAAG;UACjBC,QAAQ,EAAEV,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACS,QAAQ;QACrC,CAAC;QACDjB,OAAO,CAACkB,IAAI,CAACb,MAAM,CAAC;MACrB,CAAC;MACDc,QAAQ,EAAEA,CAAA,KAAM;QACf;QACAnB,OAAO,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACtB,IAAID,CAAC,CAACX,CAAC,KAAKY,CAAC,CAACZ,CAAC,EAAE;YAChB,OAAOW,CAAC,CAACV,CAAC,GAAGW,CAAC,CAACX,CAAC;UACjB;UACA,OAAOU,CAAC,CAACX,CAAC,GAAGY,CAAC,CAACZ,CAAC;QACjB,CAAC,CAAC;;QAEF;QACA,MAAMa,IAAI,GAAG,CAAC,CAAC;QACfvB,OAAO,CAACwB,OAAO,CAAEnB,MAAM,IAAK;UAC3B,IAAI,CAACkB,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,EAAE;YACpBa,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,GAAG,CAAC,CAAC;UACpB;UACA,IAAI,CAACa,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,EAAE;YAC9BY,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,GAAG,EAAE;UAC9B;UACAY,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,CAACO,IAAI,CAACb,MAAM,CAAC;QACtC,CAAC,CAAC;QAEFP,OAAO,CAACyB,IAAI,CAAC;MACd,CAAC;MACDE,KAAK,EAAGA,KAAK,IAAK;QACjB1B,MAAM,CAAC0B,KAAK,CAAC;MACd;IACD,CAAC,CAAC;EACH,CAAC,CAAC;AACH;AAACC,EAAA,GAjDe/B,UAAU;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
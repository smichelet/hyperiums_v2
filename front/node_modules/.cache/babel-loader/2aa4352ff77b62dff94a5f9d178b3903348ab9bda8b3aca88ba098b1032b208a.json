{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport Papa from 'papaparse';\nexport function FormatData(csvFile) {\n  const planets = [];\n  Papa.parse(csvFile, {\n    header: true,\n    step: row => {\n      const planet = {\n        id: parseInt(row.data.id),\n        name: row.data.name,\n        x: parseInt(row.data.x),\n        y: parseInt(row.data.y),\n        govsystem: parseInt(row.data.govsystem),\n        race: parseInt(row.data.race),\n        prod: parseInt(row.data.prod),\n        activity: parseInt(row.data.activity),\n        tag: row.data.tag,\n        civlevel: parseInt(row.data.civlevel)\n      };\n      planets.push(planet);\n    },\n    complete: () => {\n      // Trier les planètes par coordonnées x et y\n      planets.sort((a, b) => {\n        if (a.x === b.x) {\n          return a.y - b.y;\n        }\n        return a.x - b.x;\n      });\n\n      // Transformation du tableau de planètes en une grille de planètes triées\n      const grid = {};\n      planets.forEach(planet => {\n        if (!grid[planet.x]) {\n          grid[planet.x] = {};\n        }\n        if (!grid[planet.x][planet.y]) {\n          grid[planet.x][planet.y] = [];\n        }\n        grid[planet.x][planet.y].push(planet);\n      });\n    }\n  });\n}\n\n// export function FormatData(csvFile) {\n//   const [grid, setGrid] = useState({});\n\n// \tuseEffect(() => {\n// \t\tconst planets = [];\n\n// \t\tPapa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         // Mise à jour de l'état de la grille de planètes triées\n//         setGrid(grid);\n//       }\n// \t\t});\n// \t\t}, [csvFile]);\n\n//   return grid;\n// }\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);\n_c = FormatData;\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["useState","useEffect","Papa","FormatData","csvFile","planets","parse","header","step","row","planet","id","parseInt","data","name","x","y","govsystem","race","prod","activity","tag","civlevel","push","complete","sort","a","b","grid","forEach","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Papa from 'papaparse';\n\n\nexport function FormatData(csvFile) {\n\tconst planets = [];\n\n\tPapa.parse(csvFile, {\n\t\theader: true,\n\t\tstep: (row) => {\n\t\t\tconst planet = {\n\t\t\t\tid: parseInt(row.data.id),\n\t\t\t\tname: row.data.name,\n\t\t\t\tx: parseInt(row.data.x),\n\t\t\t\ty: parseInt(row.data.y),\n\t\t\t\tgovsystem: parseInt(row.data.govsystem),\n\t\t\t\trace: parseInt(row.data.race),\n\t\t\t\tprod: parseInt(row.data.prod),\n\t\t\t\tactivity: parseInt(row.data.activity),\n\t\t\t\ttag: row.data.tag,\n\t\t\t\tcivlevel: parseInt(row.data.civlevel)\n\t\t\t};\n\t\t\tplanets.push(planet);\n\t\t},\n\t\tcomplete: () => {\n\t\t\t// Trier les planètes par coordonnées x et y\n\t\t\tplanets.sort((a, b) => {\n\t\t\t\tif (a.x === b.x) {\n\t\t\t\t\treturn a.y - b.y;\n\t\t\t\t}\n\t\t\t\treturn a.x - b.x;\n\t\t\t});\n\n\t\t\t// Transformation du tableau de planètes en une grille de planètes triées\n\t\t\tconst grid = {};\n\t\t\tplanets.forEach((planet) => {\n\t\t\t\tif (!grid[planet.x]) {\n\t\t\t\t\tgrid[planet.x] = {};\n\t\t\t\t}\n\t\t\t\tif (!grid[planet.x][planet.y]) {\n\t\t\t\t\tgrid[planet.x][planet.y] = [];\n\t\t\t\t}\n\t\t\t\tgrid[planet.x][planet.y].push(planet);\n\t\t\t});\n\t\t}\n\t});\n}\n\n\n\n\n// export function FormatData(csvFile) {\n//   const [grid, setGrid] = useState({});\n\n// \tuseEffect(() => {\n// \t\tconst planets = [];\n\n// \t\tPapa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         // Mise à jour de l'état de la grille de planètes triées\n//         setGrid(grid);\n//       }\n// \t\t});\n// \t\t}, [csvFile]);\n\n//   return grid;\n// }\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,WAAW;AAG5B,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAE;EACnC,MAAMC,OAAO,GAAG,EAAE;EAElBH,IAAI,CAACI,KAAK,CAACF,OAAO,EAAE;IACnBG,MAAM,EAAE,IAAI;IACZC,IAAI,EAAGC,GAAG,IAAK;MACd,MAAMC,MAAM,GAAG;QACdC,EAAE,EAAEC,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACF,EAAE,CAAC;QACzBG,IAAI,EAAEL,GAAG,CAACI,IAAI,CAACC,IAAI;QACnBC,CAAC,EAAEH,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACE,CAAC,CAAC;QACvBC,CAAC,EAAEJ,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACG,CAAC,CAAC;QACvBC,SAAS,EAAEL,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACI,SAAS,CAAC;QACvCC,IAAI,EAAEN,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACK,IAAI,CAAC;QAC7BC,IAAI,EAAEP,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACM,IAAI,CAAC;QAC7BC,QAAQ,EAAER,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACO,QAAQ,CAAC;QACrCC,GAAG,EAAEZ,GAAG,CAACI,IAAI,CAACQ,GAAG;QACjBC,QAAQ,EAAEV,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACS,QAAQ;MACrC,CAAC;MACDjB,OAAO,CAACkB,IAAI,CAACb,MAAM,CAAC;IACrB,CAAC;IACDc,QAAQ,EAAEA,CAAA,KAAM;MACf;MACAnB,OAAO,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACtB,IAAID,CAAC,CAACX,CAAC,KAAKY,CAAC,CAACZ,CAAC,EAAE;UAChB,OAAOW,CAAC,CAACV,CAAC,GAAGW,CAAC,CAACX,CAAC;QACjB;QACA,OAAOU,CAAC,CAACX,CAAC,GAAGY,CAAC,CAACZ,CAAC;MACjB,CAAC,CAAC;;MAEF;MACA,MAAMa,IAAI,GAAG,CAAC,CAAC;MACfvB,OAAO,CAACwB,OAAO,CAAEnB,MAAM,IAAK;QAC3B,IAAI,CAACkB,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,EAAE;UACpBa,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,GAAG,CAAC,CAAC;QACpB;QACA,IAAI,CAACa,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,EAAE;UAC9BY,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,GAAG,EAAE;QAC9B;QACAY,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,CAACO,IAAI,CAACb,MAAM,CAAC;MACtC,CAAC,CAAC;IACH;EACD,CAAC,CAAC;AACH;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAoB,EAAA,GApHgB3B,UAAU;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
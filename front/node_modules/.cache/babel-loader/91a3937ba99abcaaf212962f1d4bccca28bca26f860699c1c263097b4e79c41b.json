{"ast":null,"code":"export function SortData(data) {\n  const records = data.split('\\n').map(line => line.split(','));\n  const sortedPlanets = records.slice(1).sort((a, b) => {\n    if (a[3] === b[3]) {\n      return a[4] - b[4];\n    }\n    return a[3] - b[3];\n  });\n  const grid = {};\n  sortedPlanets.forEach(planet => {\n    if (!grid[planet.x]) {\n      grid[planet.x] = {};\n    }\n    if (!grid[planet.x][planet.y]) {\n      grid[planet.x][planet.y] = [];\n    }\n    grid[planet.x][planet.y].push(planet);\n  });\n  return grid;\n}\n\n// export function SortData(data) {\n//   const lines = data.split('\\n');\n// \t// console.log(lines);\n\n//   const values = lines.map((line) => {\n// \t\treturn line.split(',');\n// \t});\n\n// \tvalues.sort((a, b) => {\n// \t\tif (a[3] === b[3]) {\n// \t\t\treturn a[4] - b[4];\n// \t\t} else {\n// \t\t\treturn a[3] - b[3];\n// \t\t}\n// \t});\n\n// \t// Regroupe les tableaux triés par coordonnée x en un tableau principal\n// \tconst groupedValues = [];\n// \tlet currentX = null;\n\n// \tfor (let i = 0; i < values.length; i++) {\n// \t\tconst value = values[i];\n// \t\tconst x = value[3];\n\n// \t\tif (x !== currentX) {\n// \t\t\tcurrentX = x;\n// \t\t\tgroupedValues.push([]);\n// \t\t}\n\n// \t\tgroupedValues[groupedValues.length - 1].push(value);\n// \t}\n\n// \treturn groupedValues\n// }\n_c = SortData;\nvar _c;\n$RefreshReg$(_c, \"SortData\");","map":{"version":3,"names":["SortData","data","records","split","map","line","sortedPlanets","slice","sort","a","b","grid","forEach","planet","x","y","push","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/sortData.js"],"sourcesContent":["export function SortData(data) {\n\tconst records = data.split('\\n').map((line) => line.split(','));\n\tconst sortedPlanets = records.slice(1).sort((a, b) => {\n\t\tif (a[3] === b[3]) {\n\t\t\treturn a[4] - b[4];\n\t\t}\n\t\treturn a[3] - b[3];\n\t});\n\n\tconst grid = {};\n\tsortedPlanets.forEach((planet) => {\n\t\tif (!grid[planet.x]) {\n\t\t\tgrid[planet.x] = {};\n\t\t}\n\t\tif (!grid[planet.x][planet.y]) {\n\t\t\tgrid[planet.x][planet.y] = [];\n\t\t}\n\t\tgrid[planet.x][planet.y].push(planet);\n\t});\n\n\treturn grid;\n}\n\n// export function SortData(data) {\n//   const lines = data.split('\\n');\n// \t// console.log(lines);\n\n//   const values = lines.map((line) => {\n// \t\treturn line.split(',');\n// \t});\n\n// \tvalues.sort((a, b) => {\n// \t\tif (a[3] === b[3]) {\n// \t\t\treturn a[4] - b[4];\n// \t\t} else {\n// \t\t\treturn a[3] - b[3];\n// \t\t}\n// \t});\n\n// \t// Regroupe les tableaux triés par coordonnée x en un tableau principal\n// \tconst groupedValues = [];\n// \tlet currentX = null;\n\n// \tfor (let i = 0; i < values.length; i++) {\n// \t\tconst value = values[i];\n// \t\tconst x = value[3];\n\n// \t\tif (x !== currentX) {\n// \t\t\tcurrentX = x;\n// \t\t\tgroupedValues.push([]);\n// \t\t}\n\n// \t\tgroupedValues[groupedValues.length - 1].push(value);\n// \t}\n\n// \treturn groupedValues\n// }"],"mappings":"AAAA,OAAO,SAASA,QAAQA,CAACC,IAAI,EAAE;EAC9B,MAAMC,OAAO,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC;EAC/D,MAAMG,aAAa,GAAGJ,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACrD,IAAID,CAAC,CAAC,CAAC,CAAC,KAAKC,CAAC,CAAC,CAAC,CAAC,EAAE;MAClB,OAAOD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;IACnB;IACA,OAAOD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,CAAC,CAAC;EACfL,aAAa,CAACM,OAAO,CAAEC,MAAM,IAAK;IACjC,IAAI,CAACF,IAAI,CAACE,MAAM,CAACC,CAAC,CAAC,EAAE;MACpBH,IAAI,CAACE,MAAM,CAACC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpB;IACA,IAAI,CAACH,IAAI,CAACE,MAAM,CAACC,CAAC,CAAC,CAACD,MAAM,CAACE,CAAC,CAAC,EAAE;MAC9BJ,IAAI,CAACE,MAAM,CAACC,CAAC,CAAC,CAACD,MAAM,CAACE,CAAC,CAAC,GAAG,EAAE;IAC9B;IACAJ,IAAI,CAACE,MAAM,CAACC,CAAC,CAAC,CAACD,MAAM,CAACE,CAAC,CAAC,CAACC,IAAI,CAACH,MAAM,CAAC;EACtC,CAAC,CAAC;EAEF,OAAOF,IAAI;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAAM,EAAA,GAxDgBjB,QAAQ;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
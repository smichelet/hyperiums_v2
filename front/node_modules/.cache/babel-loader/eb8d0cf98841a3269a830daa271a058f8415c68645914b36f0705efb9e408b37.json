{"ast":null,"code":"var _jsxFileName = \"/home/woot/coding/hyperiums2/front/src/components/formatData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FormatData(data) {\n  console.log(data);\n  const gridSize = 50; // Taille d'une case en pixels\n  const gridMargin = 10; // Marge pour décaler la grille\n\n  function Grid() {\n    const planets = planetsCsv.split('\\n').slice(1).map(line => {\n      const [id, name, govsystem, x, y, race, prod, activity, tag, civlevel] = line.split(',');\n      return {\n        id,\n        name,\n        govsystem,\n        x,\n        y,\n        race,\n        prod,\n        activity,\n        tag,\n        civlevel\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: planets.map(planet => {\n        const {\n          name,\n          x,\n          y\n        } = planet;\n        const left = parseInt(x) * gridSize + gridMargin;\n        const top = parseInt(y) * gridSize + gridMargin;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: `${left}px`,\n            top: `${top}px`,\n            width: `${gridSize}px`,\n            height: `${gridSize}px`,\n            backgroundColor: 'white',\n            border: '1px solid black',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          children: name\n        }, planet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 7\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 4\n    }, this);\n  }\n\n  // const dataArray = data.split('\\n');\n\n  // const grid = {}\n  // dataArray.forEach((planet) => {\n  // \tconst planet_str = planet.split(',');\n  //   const x = parseInt(planet[3])\n  // \tconst y = parseInt(planet[4])\n  // \tif (!grid[planet.x]) {\n  // \t\tgrid[planet.x] = {};\n  // \t}\n  // \tif (!grid[planet.x][planet.y]) {\n  // \t\tgrid[planet.x][planet.y] = [];\n  // \t}\n  // \tgrid[planet.x][planet.y].push(planet);\n  // });\n\n  // console.log(grid);\n}\n_c = FormatData;\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["FormatData","data","console","log","gridSize","gridMargin","Grid","planets","planetsCsv","split","slice","map","line","id","name","govsystem","x","y","race","prod","activity","tag","civlevel","_jsxDEV","style","position","children","planet","left","parseInt","top","width","height","backgroundColor","border","display","alignItems","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["export function FormatData(data) {\n\tconsole.log(data)\n\n\tconst gridSize = 50; // Taille d'une case en pixels\n\tconst gridMargin = 10; // Marge pour décaler la grille\n\t\n\tfunction Grid() {\n\t\tconst planets = planetsCsv.split('\\n').slice(1).map((line) => {\n\t\t\tconst [id, name, govsystem, x, y, race, prod, activity, tag, civlevel] = line.split(',');\n\t\t\treturn { id, name, govsystem, x, y, race, prod, activity, tag, civlevel };\n\t\t});\n\t\n\t\treturn (\n\t\t\t<div style={{ position: 'relative' }}>\n\t\t\t\t{planets.map((planet) => {\n\t\t\t\t\tconst { name, x, y } = planet;\n\t\t\t\t\tconst left = parseInt(x) * gridSize + gridMargin;\n\t\t\t\t\tconst top = parseInt(y) * gridSize + gridMargin;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={planet.id}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t\tleft: `${left}px`,\n\t\t\t\t\t\t\t\ttop: `${top}px`,\n\t\t\t\t\t\t\t\twidth: `${gridSize}px`,\n\t\t\t\t\t\t\t\theight: `${gridSize}px`,\n\t\t\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\t\t\tborder: '1px solid black',\n\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n\n\n\n\n\n\t// const dataArray = data.split('\\n');\n\n\t// const grid = {}\n\t// dataArray.forEach((planet) => {\n\t// \tconst planet_str = planet.split(',');\n  //   const x = parseInt(planet[3])\n\t// \tconst y = parseInt(planet[4])\n\t// \tif (!grid[planet.x]) {\n\t// \t\tgrid[planet.x] = {};\n\t// \t}\n\t// \tif (!grid[planet.x][planet.y]) {\n\t// \t\tgrid[planet.x][planet.y] = [];\n\t// \t}\n\t// \tgrid[planet.x][planet.y].push(planet);\n\t// });\n\n\t// console.log(grid);\n}"],"mappings":";;AAAA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAE;EAChCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,MAAMG,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,SAASC,IAAIA,CAAA,EAAG;IACf,MAAMC,OAAO,GAAGC,UAAU,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAK;MAC7D,MAAM,CAACC,EAAE,EAAEC,IAAI,EAAEC,SAAS,EAAEC,CAAC,EAAEC,CAAC,EAAEC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,QAAQ,CAAC,GAAGV,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC;MACxF,OAAO;QAAEI,EAAE;QAAEC,IAAI;QAAEC,SAAS;QAAEC,CAAC;QAAEC,CAAC;QAAEC,IAAI;QAAEC,IAAI;QAAEC,QAAQ;QAAEC,GAAG;QAAEC;MAAS,CAAC;IAC1E,CAAC,CAAC;IAEF,oBACCC,OAAA;MAAKC,KAAK,EAAE;QAAEC,QAAQ,EAAE;MAAW,CAAE;MAAAC,QAAA,EACnCnB,OAAO,CAACI,GAAG,CAAEgB,MAAM,IAAK;QACxB,MAAM;UAAEb,IAAI;UAAEE,CAAC;UAAEC;QAAE,CAAC,GAAGU,MAAM;QAC7B,MAAMC,IAAI,GAAGC,QAAQ,CAACb,CAAC,CAAC,GAAGZ,QAAQ,GAAGC,UAAU;QAChD,MAAMyB,GAAG,GAAGD,QAAQ,CAACZ,CAAC,CAAC,GAAGb,QAAQ,GAAGC,UAAU;QAC/C,oBACCkB,OAAA;UAECC,KAAK,EAAE;YACNC,QAAQ,EAAE,UAAU;YACpBG,IAAI,EAAG,GAAEA,IAAK,IAAG;YACjBE,GAAG,EAAG,GAAEA,GAAI,IAAG;YACfC,KAAK,EAAG,GAAE3B,QAAS,IAAG;YACtB4B,MAAM,EAAG,GAAE5B,QAAS,IAAG;YACvB6B,eAAe,EAAE,OAAO;YACxBC,MAAM,EAAE,iBAAiB;YACzBC,OAAO,EAAE,MAAM;YACfC,UAAU,EAAE,QAAQ;YACpBC,cAAc,EAAE;UACjB,CAAE;UAAAX,QAAA,EAEDZ;QAAI,GAdAa,MAAM,CAACd,EAAE;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAeT;MAER,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACG;EAER;;EAMA;;EAEA;EACA;EACA;EACC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACD;AAACC,EAAA,GA/De1C,UAAU;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
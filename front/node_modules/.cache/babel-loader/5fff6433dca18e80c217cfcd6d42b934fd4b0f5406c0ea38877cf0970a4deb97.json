{"ast":null,"code":"var _jsxFileName = \"/home/woot/coding/hyperiums2/front/src/App.js\";\nimport { FormatData } from './components/formatData';\nimport { FormatToCSV } from './components/formatToCSV';\nimport { MaxCoord } from './components/maxCoord';\nimport { ReadFile } from './components/readFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // Appel de la fonction pour lire le fichier local\n  const fileName = './planetsFull.txt';\n  const file = ReadFile(fileName);\n\n  // Appel de la fonction pour formatter le fichier au format CSV\n  const csvFile = FormatToCSV(file);\n\n  // Appel de la fonction qui structure les données\n  const data = FormatData(csvFile);\n  console.log(data);\n\n  // Appel de la fonction pour avoir la coordonnée maximale\n  const maxCoord = MaxCoord(csvFile);\n  console.log(maxCoord);\n\n  // Génération de la grille\n  const grid = [];\n  for (let y = maxCoord; y >= -maxCoord; y--) {\n    const row = [];\n    for (let x = -maxCoord; x <= maxCoord; x++) {\n      if (data[x] && data[x][y]) {\n        const cell = /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [\"(\", x, \", \", y, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), data[x][y].map(planet => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [planet.name, \" \", planet.tag]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this)\n          }, planet.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this))]\n        }, `${x},${y}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this);\n        row.push(cell);\n      } else {\n        row.push( /*#__PURE__*/_jsxDEV(\"td\", {}, `${x},${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 18\n        }, this));\n      }\n    }\n    grid.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"grid\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        className: \"tbody\",\n        children: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["FormatData","FormatToCSV","MaxCoord","ReadFile","jsxDEV","_jsxDEV","App","fileName","file","csvFile","data","console","log","maxCoord","grid","y","row","x","cell","children","_jsxFileName","lineNumber","columnNumber","map","planet","name","tag","push","className","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/App.js"],"sourcesContent":["import { FormatData } from './components/formatData';\nimport { FormatToCSV } from './components/formatToCSV';\nimport { MaxCoord } from './components/maxCoord';\nimport { ReadFile } from './components/readFile';\n\nfunction App() {\n  // Appel de la fonction pour lire le fichier local\n  const fileName = './planetsFull.txt';\n  const file = ReadFile(fileName);\n\n  // Appel de la fonction pour formatter le fichier au format CSV\n  const csvFile = FormatToCSV(file);\n\n  // Appel de la fonction qui structure les données\n  const data = FormatData(csvFile);\n  console.log(data);\n\n  // Appel de la fonction pour avoir la coordonnée maximale\n  const maxCoord = MaxCoord(csvFile);\n  console.log(maxCoord)\n\n  // Génération de la grille\n  const grid = [];\n  for (let y = maxCoord; y >= -maxCoord; y--) {\n    const row = [];\n\n    for (let x = -maxCoord; x <= maxCoord; x++) {\n      if (data[x] && data[x][y]) {\n        const cell = (\n          <td key={`${x},${y}`}>\n            <tr>({x}, {y})</tr>\n            {data[x][y].map(planet => (\n              <div key={planet.name}>\n                <p>{planet.name} {planet.tag}</p>\n                {/* Ajoutez ici les autres informations de la planète */}\n              </div>\n            ))}\n          </td>\n        );\n        row.push(cell);\n      } else {\n        row.push(<td key={`${x},${y}`}></td>);\n      }\n    }\n\n    grid.push(<tr key={y}>{row}</tr>);\n  }\n\n  return(\n    <div>\n      <table className=\"grid\">\n        <tbody className=\"tbody\">\n          {grid}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport Papa from 'papaparse';\n\n// export function FormatData(csvFile) {\n//   const [grid, setGrid] = useState({});\n\n// \tuseEffect(() => {\n// \t\tconst planets = [];\n\n// \t\tPapa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         // Mise à jour de l'état de la grille de planètes triées\n//         setGrid(grid);\n//       }\n// \t\t});\n// \t\t}, [csvFile]);\n\n//   return grid;\n// }\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);","map":{"version":3,"names":["useState","useEffect","Papa"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Papa from 'papaparse';\n\n// export function FormatData(csvFile) {\n//   const [grid, setGrid] = useState({});\n\n// \tuseEffect(() => {\n// \t\tconst planets = [];\n\n// \t\tPapa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         // Mise à jour de l'état de la grille de planètes triées\n//         setGrid(grid);\n//       }\n// \t\t});\n// \t\t}, [csvFile]);\n\n//   return grid;\n// }\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/woot/coding/hyperiums2/front/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const fileName = './planetsMinimal.txt';\n  const [formattedData, setFormattedData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(fileName);\n        const fileContent = await response.text();\n        const formattedData = formatData(fileContent);\n        setFormattedData(formattedData);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  const formatData = fileContent => {\n    const dataToFormat = fileContent.split('\\n');\n    dataToFormat.splice(0, 1);\n    dataToFormat.splice(0, 1, 'id,name,govsystem,x,y,race,prod,activity,tag,civlevel,planetsize,SC');\n    const csvFile = dataToFormat.join('\\n').replace(/ /g, ',');\n    const lines = csvFile.split('\\n');\n    const newLines = lines.map(line => {\n      const values = line.split(',');\n      const newValues = values.slice(0, -2);\n      return newValues.join(',');\n    });\n    const planets = [];\n    Papa.parse(newLines.join('\\n'), {\n      header: true,\n      step: row => {\n        const planet = {\n          id: parseInt(row.data.id),\n          name: row.data.name,\n          x: parseInt(row.data.x),\n          y: parseInt(row.data.y),\n          govsystem: parseInt(row.data.govsystem),\n          race: parseInt(row.data.race),\n          prod: parseInt(row.data.prod),\n          activity: parseInt(row.data.activity),\n          tag: row.data.tag,\n          civlevel: parseInt(row.data.civlevel)\n        };\n        planets.push(planet);\n      },\n      complete: () => {\n        planets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n        const grid = {};\n        planets.forEach(planet => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n        setFormattedData(planets);\n      }\n    });\n    return planets;\n  };\n  console.log(formattedData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zn7xFwFXySo31w6LWz3eR8oxYII=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import Papa from 'papaparse';\n\n// function App() {\n//   ////// Appel de la fonction pour lire le fichier local\n//   const fileName = './planetsMinimal.txt';\n//   const [file, setFileContent] = useState('');\n//   useEffect(() => {\n//     fetch(fileName)\n//       .then(response => response.text())\n//       .then(data => setFileContent(data))\n//       .catch(error => console.log(error));\n//   }, []);\n\n//   ////// Appel de la fonction pour formatter le fichier au format CSV\n//   //// Formatte en CSV\n//   // Divise chaque ligne en tableau de valeurs\n//   const dataToFormat = file.split('\\n');\n//   dataToFormat.splice(0, 1);\n//   dataToFormat.splice(0, 1, 'id,name,govsystem,x,y,race,prod,activity,tag,civlevel,planetsize,SC');\n//   const csvFile = dataToFormat.join('\\n').replace(/ /g, ',');\n//   //// Retire les deux dernières valeurs de chaque ligne (planetsize et SC)\n//   // Divise chaque ligne en tableau de valeurs\n//   const lines = csvFile.split('\\n');\n//   // Pour chaque ligne, retire les deux dernières valeurs (planetsize et SC)\n//   const newLines = lines.map((line) => {\n//     const values = line.split(',');\n//     const newValues = values.slice(0, -2);\n//     return newValues.join(',');\n//   });\n//   // Joint les lignes en une seule chaîne de caractères\n//   const newFileContent = newLines.join('\\n');\n\n//   ////// Formattage des données\n//   const planets = [];\n//   const [formattedData, setFormattedData] = useState(null);\n\n//   Papa.parse(newFileContent, {\n//     header: true,\n//     step: (row) => {\n//       const planet = {\n//         id: parseInt(row.data.id),\n//         name: row.data.name,\n//         x: parseInt(row.data.x),\n//         y: parseInt(row.data.y),\n//         govsystem: parseInt(row.data.govsystem),\n//         race: parseInt(row.data.race),\n//         prod: parseInt(row.data.prod),\n//         activity: parseInt(row.data.activity),\n//         tag: row.data.tag,\n//         civlevel: parseInt(row.data.civlevel)\n//       };\n//       planets.push(planet);\n//     },\n//     complete: (result) => {\n//       // Trier les planètes par coordonnées x et y\n//       planets.sort((a, b) => {\n//         if (a.x === b.x) {\n//           return a.y - b.y;\n//         }\n//         return a.x - b.x;\n//       });\n\n//       // Transformation du tableau de planètes en une grille de planètes triées\n//       const grid = {};\n//       planets.forEach((planet) => {\n//         if (!grid[planet.x]) {\n//           grid[planet.x] = {};\n//         }\n//         if (!grid[planet.x][planet.y]) {\n//           grid[planet.x][planet.y] = [];\n//         }\n//         grid[planet.x][planet.y].push(planet);\n//       });\n//       setFormattedData(result.data)\n//     }\n//   });\n\n//   console.log(formattedData);\n\n//   return(\n//     <div>\n//       <p>Bla</p>\n//     </div>\n//   )\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Papa","jsxDEV","_jsxDEV","App","_s","fileName","formattedData","setFormattedData","fetchData","response","fetch","fileContent","text","formatData","error","console","log","dataToFormat","split","splice","csvFile","join","replace","lines","newLines","map","line","values","newValues","slice","planets","parse","header","step","row","planet","id","parseInt","data","name","x","y","govsystem","race","prod","activity","tag","civlevel","push","complete","sort","a","b","grid","forEach","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\n\nfunction App() {\n  const fileName = './planetsMinimal.txt';\n  const [formattedData, setFormattedData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(fileName);\n        const fileContent = await response.text();\n        const formattedData = formatData(fileContent);\n        setFormattedData(formattedData);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const formatData = (fileContent) => {\n    const dataToFormat = fileContent.split('\\n');\n    dataToFormat.splice(0, 1);\n    dataToFormat.splice(0, 1, 'id,name,govsystem,x,y,race,prod,activity,tag,civlevel,planetsize,SC');\n    const csvFile = dataToFormat.join('\\n').replace(/ /g, ',');\n    const lines = csvFile.split('\\n');\n    const newLines = lines.map((line) => {\n      const values = line.split(',');\n      const newValues = values.slice(0, -2);\n      return newValues.join(',');\n    });\n\n    const planets = [];\n    Papa.parse(newLines.join('\\n'), {\n      header: true,\n      step: (row) => {\n        const planet = {\n          id: parseInt(row.data.id),\n          name: row.data.name,\n          x: parseInt(row.data.x),\n          y: parseInt(row.data.y),\n          govsystem: parseInt(row.data.govsystem),\n          race: parseInt(row.data.race),\n          prod: parseInt(row.data.prod),\n          activity: parseInt(row.data.activity),\n          tag: row.data.tag,\n          civlevel: parseInt(row.data.civlevel)\n        };\n        planets.push(planet);\n      },\n      complete: () => {\n        planets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n\n        const grid = {};\n        planets.forEach((planet) => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n\n        setFormattedData(planets);\n      }\n    });\n\n    return planets;\n  };\n\n  console.log(formattedData);\n\n  return(\n    <div>\n      <p>Bla</p>\n    </div>\n  )\n}\n\nexport default App;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import Papa from 'papaparse';\n\n// function App() {\n//   ////// Appel de la fonction pour lire le fichier local\n//   const fileName = './planetsMinimal.txt';\n//   const [file, setFileContent] = useState('');\n//   useEffect(() => {\n//     fetch(fileName)\n//       .then(response => response.text())\n//       .then(data => setFileContent(data))\n//       .catch(error => console.log(error));\n//   }, []);\n\n//   ////// Appel de la fonction pour formatter le fichier au format CSV\n//   //// Formatte en CSV\n//   // Divise chaque ligne en tableau de valeurs\n//   const dataToFormat = file.split('\\n');\n//   dataToFormat.splice(0, 1);\n//   dataToFormat.splice(0, 1, 'id,name,govsystem,x,y,race,prod,activity,tag,civlevel,planetsize,SC');\n//   const csvFile = dataToFormat.join('\\n').replace(/ /g, ',');\n//   //// Retire les deux dernières valeurs de chaque ligne (planetsize et SC)\n//   // Divise chaque ligne en tableau de valeurs\n//   const lines = csvFile.split('\\n');\n//   // Pour chaque ligne, retire les deux dernières valeurs (planetsize et SC)\n//   const newLines = lines.map((line) => {\n//     const values = line.split(',');\n//     const newValues = values.slice(0, -2);\n//     return newValues.join(',');\n//   });\n//   // Joint les lignes en une seule chaîne de caractères\n//   const newFileContent = newLines.join('\\n');\n\n//   ////// Formattage des données\n//   const planets = [];\n//   const [formattedData, setFormattedData] = useState(null);\n\n//   Papa.parse(newFileContent, {\n//     header: true,\n//     step: (row) => {\n//       const planet = {\n//         id: parseInt(row.data.id),\n//         name: row.data.name,\n//         x: parseInt(row.data.x),\n//         y: parseInt(row.data.y),\n//         govsystem: parseInt(row.data.govsystem),\n//         race: parseInt(row.data.race),\n//         prod: parseInt(row.data.prod),\n//         activity: parseInt(row.data.activity),\n//         tag: row.data.tag,\n//         civlevel: parseInt(row.data.civlevel)\n//       };\n//       planets.push(planet);\n//     },\n//     complete: (result) => {\n//       // Trier les planètes par coordonnées x et y\n//       planets.sort((a, b) => {\n//         if (a.x === b.x) {\n//           return a.y - b.y;\n//         }\n//         return a.x - b.x;\n//       });\n\n//       // Transformation du tableau de planètes en une grille de planètes triées\n//       const grid = {};\n//       planets.forEach((planet) => {\n//         if (!grid[planet.x]) {\n//           grid[planet.x] = {};\n//         }\n//         if (!grid[planet.x][planet.y]) {\n//           grid[planet.x][planet.y] = [];\n//         }\n//         grid[planet.x][planet.y].push(planet);\n//       });\n//       setFormattedData(result.data)\n//     }\n//   });\n\n//   console.log(formattedData);\n\n//   return(\n//     <div>\n//       <p>Bla</p>\n//     </div>\n//   )\n// }\n\n// export default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
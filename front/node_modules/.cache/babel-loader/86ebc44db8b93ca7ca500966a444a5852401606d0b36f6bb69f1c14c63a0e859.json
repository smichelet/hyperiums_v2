{"ast":null,"code":"export function FormatData(csvFile) {\n  return new Promise((resolve, reject) => {\n    const planets = [];\n    Papa.parse(csvFile, {\n      header: true,\n      step: row => {\n        const planet = {\n          id: parseInt(row.data.id),\n          name: row.data.name,\n          x: parseInt(row.data.x),\n          y: parseInt(row.data.y),\n          govsystem: parseInt(row.data.govsystem),\n          race: parseInt(row.data.race),\n          prod: parseInt(row.data.prod),\n          activity: parseInt(row.data.activity),\n          tag: row.data.tag,\n          civlevel: parseInt(row.data.civlevel)\n        };\n        planets.push(planet);\n      },\n      complete: () => {\n        // Trier les planètes par coordonnées x et y\n        planets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n\n        // Transformation du tableau de planètes en une grille de planètes triées\n        const grid = {};\n        planets.forEach(planet => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n        resolve(grid);\n      },\n      error: error => {\n        reject(error);\n      }\n    });\n  });\n}\n_c = FormatData;\n;\n\n// export function FormatData(csvFile) {\n//   return new Promise((resolve, reject) => {\n//     const planets = [];\n\n//     Papa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         resolve(grid);\n//       },\n//       error: (error) => {\n//         reject(error);\n//       }\n//     });\n//   });\n// };\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["FormatData","csvFile","Promise","resolve","reject","planets","Papa","parse","header","step","row","planet","id","parseInt","data","name","x","y","govsystem","race","prod","activity","tag","civlevel","push","complete","sort","a","b","grid","forEach","error","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["export function FormatData(csvFile) {\n  return new Promise((resolve, reject) => {\n    const planets = [];\n\n    Papa.parse(csvFile, {\n      header: true,\n      step: (row) => {\n        const planet = {\n          id: parseInt(row.data.id),\n          name: row.data.name,\n          x: parseInt(row.data.x),\n          y: parseInt(row.data.y),\n          govsystem: parseInt(row.data.govsystem),\n          race: parseInt(row.data.race),\n          prod: parseInt(row.data.prod),\n          activity: parseInt(row.data.activity),\n          tag: row.data.tag,\n          civlevel: parseInt(row.data.civlevel)\n        };\n        planets.push(planet);\n      },\n      complete: () => {\n        // Trier les planètes par coordonnées x et y\n        planets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n\n        // Transformation du tableau de planètes en une grille de planètes triées\n        const grid = {};\n        planets.forEach((planet) => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n\n        resolve(grid);\n      },\n      error: (error) => {\n        reject(error);\n      }\n    });\n  });\n};\n\n// export function FormatData(csvFile) {\n//   return new Promise((resolve, reject) => {\n//     const planets = [];\n\n//     Papa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         resolve(grid);\n//       },\n//       error: (error) => {\n//         reject(error);\n//       }\n//     });\n//   });\n// };"],"mappings":"AAAA,OAAO,SAASA,UAAUA,CAACC,OAAO,EAAE;EAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAG,EAAE;IAElBC,IAAI,CAACC,KAAK,CAACN,OAAO,EAAE;MAClBO,MAAM,EAAE,IAAI;MACZC,IAAI,EAAGC,GAAG,IAAK;QACb,MAAMC,MAAM,GAAG;UACbC,EAAE,EAAEC,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACF,EAAE,CAAC;UACzBG,IAAI,EAAEL,GAAG,CAACI,IAAI,CAACC,IAAI;UACnBC,CAAC,EAAEH,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACE,CAAC,CAAC;UACvBC,CAAC,EAAEJ,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACG,CAAC,CAAC;UACvBC,SAAS,EAAEL,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACI,SAAS,CAAC;UACvCC,IAAI,EAAEN,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACK,IAAI,CAAC;UAC7BC,IAAI,EAAEP,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACM,IAAI,CAAC;UAC7BC,QAAQ,EAAER,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACO,QAAQ,CAAC;UACrCC,GAAG,EAAEZ,GAAG,CAACI,IAAI,CAACQ,GAAG;UACjBC,QAAQ,EAAEV,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACS,QAAQ;QACtC,CAAC;QACDlB,OAAO,CAACmB,IAAI,CAACb,MAAM,CAAC;MACtB,CAAC;MACDc,QAAQ,EAAEA,CAAA,KAAM;QACd;QACApB,OAAO,CAACqB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACrB,IAAID,CAAC,CAACX,CAAC,KAAKY,CAAC,CAACZ,CAAC,EAAE;YACf,OAAOW,CAAC,CAACV,CAAC,GAAGW,CAAC,CAACX,CAAC;UAClB;UACA,OAAOU,CAAC,CAACX,CAAC,GAAGY,CAAC,CAACZ,CAAC;QAClB,CAAC,CAAC;;QAEF;QACA,MAAMa,IAAI,GAAG,CAAC,CAAC;QACfxB,OAAO,CAACyB,OAAO,CAAEnB,MAAM,IAAK;UAC1B,IAAI,CAACkB,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,EAAE;YACnBa,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,GAAG,CAAC,CAAC;UACrB;UACA,IAAI,CAACa,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,EAAE;YAC7BY,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,GAAG,EAAE;UAC/B;UACAY,IAAI,CAAClB,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,CAACO,IAAI,CAACb,MAAM,CAAC;QACvC,CAAC,CAAC;QAEFR,OAAO,CAAC0B,IAAI,CAAC;MACf,CAAC;MACDE,KAAK,EAAGA,KAAK,IAAK;QAChB3B,MAAM,CAAC2B,KAAK,CAAC;MACf;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAACC,EAAA,GAjDehC,UAAU;AAiDzB;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
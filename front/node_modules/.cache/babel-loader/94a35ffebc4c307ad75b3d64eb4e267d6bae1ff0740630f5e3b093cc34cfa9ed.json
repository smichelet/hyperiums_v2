{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport csv from 'csv-parser';\nexport function FormatData(csvFile) {\n  _s();\n  const [grid, setGrid] = useState({});\n  useEffect(() => {\n    const planets = [];\n    csv(csvFile).on('data', row => {\n      planets.push({\n        id: parseInt(row.id),\n        name: row.name,\n        x: parseInt(row.x),\n        y: parseInt(row.y),\n        govsystem: parseInt(row.govsystem),\n        race: parseInt(row.race),\n        prod: parseInt(row.prod),\n        activity: parseInt(row.activity),\n        tag: row.tag,\n        civlevel: parseInt(row.civlevel)\n      });\n    }).on('end', () => {\n      planets.sort((a, b) => {\n        if (a.x === b.x) {\n          return a.y - b.y;\n        }\n        return a.x - b.x;\n      });\n      const grid = {};\n      planets.forEach(planet => {\n        if (!grid[planet.x]) {\n          grid[planet.x] = {};\n        }\n        if (!grid[planet.x][planet.y]) {\n          grid[planet.x][planet.y] = [];\n        }\n        grid[planet.x][planet.y].push(planet);\n      });\n\n      // Mise à jour de l'état de la grille de planètes triées\n      setGrid(grid);\n    });\n  }, [csvFile]);\n  return grid;\n}\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);\n_s(FormatData, \"r0NCjBYlAtX/3HknyT68Yns7xBk=\");\n_c = FormatData;\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["useState","useEffect","csv","FormatData","csvFile","_s","grid","setGrid","planets","on","row","push","id","parseInt","name","x","y","govsystem","race","prod","activity","tag","civlevel","sort","a","b","forEach","planet","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport csv from 'csv-parser';\n\nexport function FormatData(csvFile) {\n  const [grid, setGrid] = useState({});\n\n\tuseEffect(() => {\n\t\tconst planets = [];\n\n\t\tcsv(csvFile)\n\t\t\t.on('data', (row) => {\n\t\t\t\tplanets.push({\n\t\t\t\t\tid: parseInt(row.id),\n          name: row.name,\n          x: parseInt(row.x),\n          y: parseInt(row.y),\n          govsystem: parseInt(row.govsystem),\n          race: parseInt(row.race),\n          prod: parseInt(row.prod),\n          activity: parseInt(row.activity),\n          tag: row.tag,\n          civlevel: parseInt(row.civlevel)\n\t\t\t\t})\n\t\t\t})\n\t\t\t.on('end', () => {\n\t\t\t\tplanets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n\n        const grid = {};\n        planets.forEach((planet) => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n\n        // Mise à jour de l'état de la grille de planètes triées\n        setGrid(grid);\n      });\n  }, [csvFile]);\n\n  return grid;\n}\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,GAAG,MAAM,YAAY;AAE5B,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAErCC,SAAS,CAAC,MAAM;IACf,MAAMO,OAAO,GAAG,EAAE;IAElBN,GAAG,CAACE,OAAO,CAAC,CACVK,EAAE,CAAC,MAAM,EAAGC,GAAG,IAAK;MACpBF,OAAO,CAACG,IAAI,CAAC;QACZC,EAAE,EAAEC,QAAQ,CAACH,GAAG,CAACE,EAAE,CAAC;QACfE,IAAI,EAAEJ,GAAG,CAACI,IAAI;QACdC,CAAC,EAAEF,QAAQ,CAACH,GAAG,CAACK,CAAC,CAAC;QAClBC,CAAC,EAAEH,QAAQ,CAACH,GAAG,CAACM,CAAC,CAAC;QAClBC,SAAS,EAAEJ,QAAQ,CAACH,GAAG,CAACO,SAAS,CAAC;QAClCC,IAAI,EAAEL,QAAQ,CAACH,GAAG,CAACQ,IAAI,CAAC;QACxBC,IAAI,EAAEN,QAAQ,CAACH,GAAG,CAACS,IAAI,CAAC;QACxBC,QAAQ,EAAEP,QAAQ,CAACH,GAAG,CAACU,QAAQ,CAAC;QAChCC,GAAG,EAAEX,GAAG,CAACW,GAAG;QACZC,QAAQ,EAAET,QAAQ,CAACH,GAAG,CAACY,QAAQ;MACrC,CAAC,CAAC;IACH,CAAC,CAAC,CACDb,EAAE,CAAC,KAAK,EAAE,MAAM;MAChBD,OAAO,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACjB,IAAID,CAAC,CAACT,CAAC,KAAKU,CAAC,CAACV,CAAC,EAAE;UACf,OAAOS,CAAC,CAACR,CAAC,GAAGS,CAAC,CAACT,CAAC;QAClB;QACA,OAAOQ,CAAC,CAACT,CAAC,GAAGU,CAAC,CAACV,CAAC;MAClB,CAAC,CAAC;MAEF,MAAMT,IAAI,GAAG,CAAC,CAAC;MACfE,OAAO,CAACkB,OAAO,CAAEC,MAAM,IAAK;QAC1B,IAAI,CAACrB,IAAI,CAACqB,MAAM,CAACZ,CAAC,CAAC,EAAE;UACnBT,IAAI,CAACqB,MAAM,CAACZ,CAAC,CAAC,GAAG,CAAC,CAAC;QACrB;QACA,IAAI,CAACT,IAAI,CAACqB,MAAM,CAACZ,CAAC,CAAC,CAACY,MAAM,CAACX,CAAC,CAAC,EAAE;UAC7BV,IAAI,CAACqB,MAAM,CAACZ,CAAC,CAAC,CAACY,MAAM,CAACX,CAAC,CAAC,GAAG,EAAE;QAC/B;QACAV,IAAI,CAACqB,MAAM,CAACZ,CAAC,CAAC,CAACY,MAAM,CAACX,CAAC,CAAC,CAACL,IAAI,CAACgB,MAAM,CAAC;MACvC,CAAC,CAAC;;MAEF;MACApB,OAAO,CAACD,IAAI,CAAC;IACf,CAAC,CAAC;EACN,CAAC,EAAE,CAACF,OAAO,CAAC,CAAC;EAEb,OAAOE,IAAI;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAD,EAAA,CAhEgBF,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
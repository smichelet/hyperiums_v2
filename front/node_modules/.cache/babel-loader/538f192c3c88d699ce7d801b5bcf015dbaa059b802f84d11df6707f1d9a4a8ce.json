{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Papa from 'papaparse';\nexport function FormatData(csvFile) {\n  _s();\n  const [grid, setGrid] = useState({});\n  useEffect(() => {\n    const planets = [];\n    Papa.parse(csvFile, {\n      header: true,\n      step: row => {\n        const planet = {\n          id: parseInt(row.data.id),\n          name: row.data.name,\n          x: parseInt(row.data.x),\n          y: parseInt(row.data.y),\n          govsystem: parseInt(row.data.govsystem),\n          race: parseInt(row.data.race),\n          prod: parseInt(row.data.prod),\n          activity: parseInt(row.data.activity),\n          tag: row.data.tag,\n          civlevel: parseInt(row.data.civlevel)\n        };\n        planets.push(planet);\n      },\n      complete: () => {\n        // Trier les planètes par coordonnées x et y\n        planets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n\n        // Transformation du tableau de planètes en une grille de planètes triées\n        const grid = {};\n        planets.forEach(planet => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n\n        // Mise à jour de l'état de la grille de planètes triées\n        setGrid(grid);\n      }\n    });\n  });\n  return grid;\n}\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);\n_s(FormatData, \"r0NCjBYlAtX/3HknyT68Yns7xBk=\");\n_c = FormatData;\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["useState","useEffect","Papa","FormatData","csvFile","_s","grid","setGrid","planets","parse","header","step","row","planet","id","parseInt","data","name","x","y","govsystem","race","prod","activity","tag","civlevel","push","complete","sort","a","b","forEach","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Papa from 'papaparse';\n\nexport function FormatData(csvFile) {\n  const [grid, setGrid] = useState({});\n\n\tuseEffect(() => {\n\t\tconst planets = [];\n\n\t\tPapa.parse(csvFile, {\n      header: true,\n      step: (row) => {\n        const planet = {\n          id: parseInt(row.data.id),\n          name: row.data.name,\n          x: parseInt(row.data.x),\n          y: parseInt(row.data.y),\n          govsystem: parseInt(row.data.govsystem),\n          race: parseInt(row.data.race),\n          prod: parseInt(row.data.prod),\n          activity: parseInt(row.data.activity),\n          tag: row.data.tag,\n          civlevel: parseInt(row.data.civlevel)\n        };\n        planets.push(planet);\n      },\n      complete: () => {\n        // Trier les planètes par coordonnées x et y\n        planets.sort((a, b) => {\n          if (a.x === b.x) {\n            return a.y - b.y;\n          }\n          return a.x - b.x;\n        });\n\n        // Transformation du tableau de planètes en une grille de planètes triées\n        const grid = {};\n        planets.forEach((planet) => {\n          if (!grid[planet.x]) {\n            grid[planet.x] = {};\n          }\n          if (!grid[planet.x][planet.y]) {\n            grid[planet.x][planet.y] = [];\n          }\n          grid[planet.x][planet.y].push(planet);\n        });\n\n        // Mise à jour de l'état de la grille de planètes triées\n        setGrid(grid);\n      }});\n\t\t});\n\n  return grid;\n}\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n// \tconst x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,WAAW;AAE5B,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAErCC,SAAS,CAAC,MAAM;IACf,MAAMO,OAAO,GAAG,EAAE;IAElBN,IAAI,CAACO,KAAK,CAACL,OAAO,EAAE;MAChBM,MAAM,EAAE,IAAI;MACZC,IAAI,EAAGC,GAAG,IAAK;QACb,MAAMC,MAAM,GAAG;UACbC,EAAE,EAAEC,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACF,EAAE,CAAC;UACzBG,IAAI,EAAEL,GAAG,CAACI,IAAI,CAACC,IAAI;UACnBC,CAAC,EAAEH,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACE,CAAC,CAAC;UACvBC,CAAC,EAAEJ,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACG,CAAC,CAAC;UACvBC,SAAS,EAAEL,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACI,SAAS,CAAC;UACvCC,IAAI,EAAEN,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACK,IAAI,CAAC;UAC7BC,IAAI,EAAEP,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACM,IAAI,CAAC;UAC7BC,QAAQ,EAAER,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACO,QAAQ,CAAC;UACrCC,GAAG,EAAEZ,GAAG,CAACI,IAAI,CAACQ,GAAG;UACjBC,QAAQ,EAAEV,QAAQ,CAACH,GAAG,CAACI,IAAI,CAACS,QAAQ;QACtC,CAAC;QACDjB,OAAO,CAACkB,IAAI,CAACb,MAAM,CAAC;MACtB,CAAC;MACDc,QAAQ,EAAEA,CAAA,KAAM;QACd;QACAnB,OAAO,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACrB,IAAID,CAAC,CAACX,CAAC,KAAKY,CAAC,CAACZ,CAAC,EAAE;YACf,OAAOW,CAAC,CAACV,CAAC,GAAGW,CAAC,CAACX,CAAC;UAClB;UACA,OAAOU,CAAC,CAACX,CAAC,GAAGY,CAAC,CAACZ,CAAC;QAClB,CAAC,CAAC;;QAEF;QACA,MAAMZ,IAAI,GAAG,CAAC,CAAC;QACfE,OAAO,CAACuB,OAAO,CAAElB,MAAM,IAAK;UAC1B,IAAI,CAACP,IAAI,CAACO,MAAM,CAACK,CAAC,CAAC,EAAE;YACnBZ,IAAI,CAACO,MAAM,CAACK,CAAC,CAAC,GAAG,CAAC,CAAC;UACrB;UACA,IAAI,CAACZ,IAAI,CAACO,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,EAAE;YAC7Bb,IAAI,CAACO,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,GAAG,EAAE;UAC/B;UACAb,IAAI,CAACO,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,CAACO,IAAI,CAACb,MAAM,CAAC;QACvC,CAAC,CAAC;;QAEF;QACAN,OAAO,CAACD,IAAI,CAAC;MACf;IAAC,CAAC,CAAC;EACP,CAAC,CAAC;EAEF,OAAOA,IAAI;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAD,EAAA,CApEgBF,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
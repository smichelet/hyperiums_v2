{"ast":null,"code":"var _jsxFileName = \"/home/woot/coding/hyperiums2/front/src/components/formatData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FormatData(data) {\n  console.log(data);\n  const gridSize = 50; // Taille d'une case en pixels\n  const gridMargin = 10; // Marge pour décaler la grille\n\n  // function Grid() {\n  const planets = planetsCsv.split('\\n').slice(1).map(line => {\n    const [id, name, govsystem, x, y, race, prod, activity, tag, civlevel] = line.split(',');\n    return {\n      id,\n      name,\n      govsystem,\n      x,\n      y,\n      race,\n      prod,\n      activity,\n      tag,\n      civlevel\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: planets.map(planet => {\n      const {\n        name,\n        x,\n        y\n      } = planet;\n      const left = parseInt(x) * gridSize + gridMargin;\n      const top = parseInt(y) * gridSize + gridMargin;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: `${left}px`,\n          top: `${top}px`,\n          width: `${gridSize}px`,\n          height: `${gridSize}px`,\n          backgroundColor: 'white',\n          border: '1px solid black',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: name\n      }, planet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 4\n  }, this);\n}\n\n// const dataArray = data.split('\\n');\n\n// const grid = {}\n// dataArray.forEach((planet) => {\n// \tconst planet_str = planet.split(',');\n//   const x = parseInt(planet[3])\n// \tconst y = parseInt(planet[4])\n// \tif (!grid[planet.x]) {\n// \t\tgrid[planet.x] = {};\n// \t}\n// \tif (!grid[planet.x][planet.y]) {\n// \t\tgrid[planet.x][planet.y] = [];\n// \t}\n// \tgrid[planet.x][planet.y].push(planet);\n// });\n\n// console.log(grid);\n_c = FormatData;\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["FormatData","data","console","log","gridSize","gridMargin","planets","planetsCsv","split","slice","map","line","id","name","govsystem","x","y","race","prod","activity","tag","civlevel","_jsxDEV","style","position","children","planet","left","parseInt","top","width","height","backgroundColor","border","display","alignItems","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["export function FormatData(data) {\n\tconsole.log(data)\n\n\tconst gridSize = 50; // Taille d'une case en pixels\n\tconst gridMargin = 10; // Marge pour décaler la grille\n\t\n\t// function Grid() {\n\t\tconst planets = planetsCsv.split('\\n').slice(1).map((line) => {\n\t\t\tconst [id, name, govsystem, x, y, race, prod, activity, tag, civlevel] = line.split(',');\n\t\t\treturn { id, name, govsystem, x, y, race, prod, activity, tag, civlevel };\n\t\t});\n\t\n\t\treturn (\n\t\t\t<div style={{ position: 'relative' }}>\n\t\t\t\t{planets.map((planet) => {\n\t\t\t\t\tconst { name, x, y } = planet;\n\t\t\t\t\tconst left = parseInt(x) * gridSize + gridMargin;\n\t\t\t\t\tconst top = parseInt(y) * gridSize + gridMargin;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={planet.id}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t\tleft: `${left}px`,\n\t\t\t\t\t\t\t\ttop: `${top}px`,\n\t\t\t\t\t\t\t\twidth: `${gridSize}px`,\n\t\t\t\t\t\t\t\theight: `${gridSize}px`,\n\t\t\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\t\t\tborder: '1px solid black',\n\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n\n\n\n\n\n\t// const dataArray = data.split('\\n');\n\n\t// const grid = {}\n\t// dataArray.forEach((planet) => {\n\t// \tconst planet_str = planet.split(',');\n  //   const x = parseInt(planet[3])\n\t// \tconst y = parseInt(planet[4])\n\t// \tif (!grid[planet.x]) {\n\t// \t\tgrid[planet.x] = {};\n\t// \t}\n\t// \tif (!grid[planet.x][planet.y]) {\n\t// \t\tgrid[planet.x][planet.y] = [];\n\t// \t}\n\t// \tgrid[planet.x][planet.y].push(planet);\n\t// });\n\n\t// console.log(grid);"],"mappings":";;AAAA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAE;EAChCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,MAAMG,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB;EACC,MAAMC,OAAO,GAAGC,UAAU,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAK;IAC7D,MAAM,CAACC,EAAE,EAAEC,IAAI,EAAEC,SAAS,EAAEC,CAAC,EAAEC,CAAC,EAAEC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,QAAQ,CAAC,GAAGV,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC;IACxF,OAAO;MAAEI,EAAE;MAAEC,IAAI;MAAEC,SAAS;MAAEC,CAAC;MAAEC,CAAC;MAAEC,IAAI;MAAEC,IAAI;MAAEC,QAAQ;MAAEC,GAAG;MAAEC;IAAS,CAAC;EAC1E,CAAC,CAAC;EAEF,oBACCC,OAAA;IAAKC,KAAK,EAAE;MAAEC,QAAQ,EAAE;IAAW,CAAE;IAAAC,QAAA,EACnCnB,OAAO,CAACI,GAAG,CAAEgB,MAAM,IAAK;MACxB,MAAM;QAAEb,IAAI;QAAEE,CAAC;QAAEC;MAAE,CAAC,GAAGU,MAAM;MAC7B,MAAMC,IAAI,GAAGC,QAAQ,CAACb,CAAC,CAAC,GAAGX,QAAQ,GAAGC,UAAU;MAChD,MAAMwB,GAAG,GAAGD,QAAQ,CAACZ,CAAC,CAAC,GAAGZ,QAAQ,GAAGC,UAAU;MAC/C,oBACCiB,OAAA;QAECC,KAAK,EAAE;UACNC,QAAQ,EAAE,UAAU;UACpBG,IAAI,EAAG,GAAEA,IAAK,IAAG;UACjBE,GAAG,EAAG,GAAEA,GAAI,IAAG;UACfC,KAAK,EAAG,GAAE1B,QAAS,IAAG;UACtB2B,MAAM,EAAG,GAAE3B,QAAS,IAAG;UACvB4B,eAAe,EAAE,OAAO;UACxBC,MAAM,EAAE,iBAAiB;UACzBC,OAAO,EAAE,MAAM;UACfC,UAAU,EAAE,QAAQ;UACpBC,cAAc,EAAE;QACjB,CAAE;QAAAX,QAAA,EAEDZ;MAAI,GAdAa,MAAM,CAACd,EAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAeT;IAER,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAER;;AAMA;;AAEA;AACA;AACA;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAC,EAAA,GA9DezC,UAAU;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
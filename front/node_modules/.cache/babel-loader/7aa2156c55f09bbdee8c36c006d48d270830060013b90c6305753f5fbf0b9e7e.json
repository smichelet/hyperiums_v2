{"ast":null,"code":"export function FormatData(csvFile) {\n  const planetArray = csvFile.split(\"\\n\").map(line => line.split(\",\")).slice(1).map(planet => ({\n    id: parseInt(planet[0]),\n    name: planet[1],\n    govsystem: parseInt(planet[2]),\n    x: parseInt(planet[3]),\n    y: parseInt(planet[4]),\n    race: parseInt(planet[5]),\n    prod: parseInt(planet[6]),\n    activity: parseInt(planet[7]),\n    tag: planet[8],\n    civlevel: parseInt(planet[9])\n  }));\n\n  // Tri des planètes par coordonnées x puis y\n  planetArray.sort((a, b) => {\n    if (a.x !== b.x) {\n      return a.x - b.x;\n    } else {\n      return a.y - b.y;\n    }\n  });\n\n  // Créer un objet avec les coordonnées x puis y comme clés\n  const planetObject = {};\n  planetArray.forEach(planet => {\n    if (!planetObject[planet.x]) {\n      planetObject[planet.x] = {};\n    }\n    if (!planetObject[planet.x][planet.y]) {\n      planetObject[planet.x][planet.y] = [];\n    }\n    planetObject[planet.x];\n  });\n  return planetObject;\n}\n_c = FormatData;\n;\n\n// import Papa from 'papaparse';\n\n// export function FormatData(csvFile) {\n//   return new Promise((resolve, reject) => {\n//     const planets = [];\n\n//     Papa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         resolve(grid);\n//       },\n//       error: (error) => {\n//         reject(error);\n//       }\n//     });\n//   });\n// };\nvar _c;\n$RefreshReg$(_c, \"FormatData\");","map":{"version":3,"names":["FormatData","csvFile","planetArray","split","map","line","slice","planet","id","parseInt","name","govsystem","x","y","race","prod","activity","tag","civlevel","sort","a","b","planetObject","forEach","_c","$RefreshReg$"],"sources":["/home/woot/coding/hyperiums2/front/src/components/formatData.js"],"sourcesContent":["export function FormatData(csvFile) {\n  const planetArray = csvFile.split(\"\\n\").map((line) => line.split(\",\")).slice(1).map((planet) => ({\n    id: parseInt(planet[0]),\n    name: planet[1],\n    govsystem: parseInt(planet[2]),\n    x: parseInt(planet[3]),\n    y: parseInt(planet[4]),\n    race: parseInt(planet[5]),\n    prod: parseInt(planet[6]),\n    activity: parseInt(planet[7]),\n    tag: planet[8],\n    civlevel: parseInt(planet[9]),\n  }));\n  \n  // Tri des planètes par coordonnées x puis y\n  planetArray.sort((a, b) => {\n    if (a.x !== b.x) {\n      return a.x - b.x;\n    } else {\n      return a.y - b.y;\n    }\n  });\n  \n  // Créer un objet avec les coordonnées x puis y comme clés\n  const planetObject = {};\n  planetArray.forEach((planet) => {\n    if (!planetObject[planet.x]) {\n      planetObject[planet.x] = {};\n    }\n    if (!planetObject[planet.x][planet.y]) {\n      planetObject[planet.x][planet.y] = [];\n    }\n    planetObject[planet.x]\n  });\n\n  return planetObject;\n};\n\n// import Papa from 'papaparse';\n\n// export function FormatData(csvFile) {\n//   return new Promise((resolve, reject) => {\n//     const planets = [];\n\n//     Papa.parse(csvFile, {\n//       header: true,\n//       step: (row) => {\n//         const planet = {\n//           id: parseInt(row.data.id),\n//           name: row.data.name,\n//           x: parseInt(row.data.x),\n//           y: parseInt(row.data.y),\n//           govsystem: parseInt(row.data.govsystem),\n//           race: parseInt(row.data.race),\n//           prod: parseInt(row.data.prod),\n//           activity: parseInt(row.data.activity),\n//           tag: row.data.tag,\n//           civlevel: parseInt(row.data.civlevel)\n//         };\n//         planets.push(planet);\n//       },\n//       complete: () => {\n//         // Trier les planètes par coordonnées x et y\n//         planets.sort((a, b) => {\n//           if (a.x === b.x) {\n//             return a.y - b.y;\n//           }\n//           return a.x - b.x;\n//         });\n\n//         // Transformation du tableau de planètes en une grille de planètes triées\n//         const grid = {};\n//         planets.forEach((planet) => {\n//           if (!grid[planet.x]) {\n//             grid[planet.x] = {};\n//           }\n//           if (!grid[planet.x][planet.y]) {\n//             grid[planet.x][planet.y] = [];\n//           }\n//           grid[planet.x][planet.y].push(planet);\n//         });\n\n//         resolve(grid);\n//       },\n//       error: (error) => {\n//         reject(error);\n//       }\n//     });\n//   });\n// };"],"mappings":"AAAA,OAAO,SAASA,UAAUA,CAACC,OAAO,EAAE;EAClC,MAAMC,WAAW,GAAGD,OAAO,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,CAACF,GAAG,CAAEG,MAAM,KAAM;IAC/FC,EAAE,EAAEC,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IACvBG,IAAI,EAAEH,MAAM,CAAC,CAAC,CAAC;IACfI,SAAS,EAAEF,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9BK,CAAC,EAAEH,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IACtBM,CAAC,EAAEJ,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IACtBO,IAAI,EAAEL,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IACzBQ,IAAI,EAAEN,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IACzBS,QAAQ,EAAEP,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7BU,GAAG,EAAEV,MAAM,CAAC,CAAC,CAAC;IACdW,QAAQ,EAAET,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC,CAAC;;EAEH;EACAL,WAAW,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACzB,IAAID,CAAC,CAACR,CAAC,KAAKS,CAAC,CAACT,CAAC,EAAE;MACf,OAAOQ,CAAC,CAACR,CAAC,GAAGS,CAAC,CAACT,CAAC;IAClB,CAAC,MAAM;MACL,OAAOQ,CAAC,CAACP,CAAC,GAAGQ,CAAC,CAACR,CAAC;IAClB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMS,YAAY,GAAG,CAAC,CAAC;EACvBpB,WAAW,CAACqB,OAAO,CAAEhB,MAAM,IAAK;IAC9B,IAAI,CAACe,YAAY,CAACf,MAAM,CAACK,CAAC,CAAC,EAAE;MAC3BU,YAAY,CAACf,MAAM,CAACK,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B;IACA,IAAI,CAACU,YAAY,CAACf,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,EAAE;MACrCS,YAAY,CAACf,MAAM,CAACK,CAAC,CAAC,CAACL,MAAM,CAACM,CAAC,CAAC,GAAG,EAAE;IACvC;IACAS,YAAY,CAACf,MAAM,CAACK,CAAC,CAAC;EACxB,CAAC,CAAC;EAEF,OAAOU,YAAY;AACrB;AAACE,EAAA,GApCexB,UAAU;AAoCzB;;AAED;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}